//#include <stdint.h>
//
//// Định nghĩa địa chỉ thanh ghi
//#define RCC_BASE        0x40023800
//#define GPIOA_BASE      0x40020000
//#define USART2_BASE     0x40004400
//
//// Thanh ghi RCC
//#define RCC_AHB1ENR     (*(volatile uint32_t *)(RCC_BASE + 0x30))
//#define RCC_APB1ENR     (*(volatile uint32_t *)(RCC_BASE + 0x40))
//
//// Thanh ghi GPIOA
//#define GPIOA_MODER     (*(volatile uint32_t *)(GPIOA_BASE + 0x00))
//#define GPIOA_AFRL      (*(volatile uint32_t *)(GPIOA_BASE + 0x20))
//
//// Thanh ghi USART2
//#define USART2_SR       (*(volatile uint32_t *)(USART2_BASE + 0x00))
//#define USART2_DR       (*(volatile uint32_t *)(USART2_BASE + 0x04))
//#define USART2_BRR      (*(volatile uint32_t *)(USART2_BASE + 0x08))
//#define USART2_CR1      (*(volatile uint32_t *)(USART2_BASE + 0x0C))
//
//// Hàm delay đơn giản
//void delay_ms(uint32_t ms) {
//    for (uint32_t i = 0; i < ms * 8000; i++); // Ước lượng cho 16 MHz
//}
//
//// Hàm khởi tạo GPIO cho UART2 (PA2: TX, PA3: RX)
//void GPIO_Init(void) {
//    RCC_AHB1ENR |= (1 << 0); // Bật clock cho GPIOA
//
//    // Cấu hình PA2, PA3 là Alternate Function
//    GPIOA_MODER &= ~(3 << 4); // Xóa bit PA2
//    GPIOA_MODER |= (2 << 4);  // PA2: Alternate Function
//    GPIOA_MODER &= ~(3 << 6); // Xóa bit PA3
//    GPIOA_MODER |= (2 << 6);  // PA3: Alternate Function
//
//    // Cấu hình Alternate Function AF7 (USART2) cho PA2, PA3
//    GPIOA_AFRL &= ~(0xF << 8); // Xóa bit AF cho PA2
//    GPIOA_AFRL |= (7 << 8);    // PA2: AF7
//    GPIOA_AFRL &= ~(0xF << 12); // Xóa bit AF cho PA3
//    GPIOA_AFRL |= (7 << 12);   // PA3: AF7
//}
//
//// Hàm khởi tạo UART2
//void UART2_Init(void) {
//    RCC_APB1ENR |= (1 << 17); // Bật clock cho USART2
//
//    // Cấu hình Baud Rate = 115200, fCK = 16 MHz
//    USART2_BRR = (8 << 4) | 11; // DIV_Mantissa = 8, DIV_Fraction = 11
//
//    // Cấu hình USART2: 8 bits, 1 stop bit, no parity
//    USART2_CR1 = (1 << 13) | // Bật USART
//                 (1 << 3);   // Bật TX
//                 // RX không cần bật do chỉ gửi dữ liệu
//}
//
//// Hàm gửi một ký tự qua UART2
//void UART2_Transmit_char(char c) {
//    while (!(USART2_SR & (1 << 7))); // Chờ TXE (Transmit Data Register Empty)
//    USART2_DR = c; // Ghi ký tự vào DR
//}
//
//// Hàm gửi chuỗi qua UART2
//void UART2_Transmit_string(char *str) {
//    while (*str) {
//        UART2_Transmit_char(*str++);
//    }
//}
//
//int main(void) {
//    // Khởi tạo GPIO và UART2
//    GPIO_Init();
//    UART2_Init();
//
//    // Chuỗi cần gửi
//    char *msg = "Hello Stm32\r\n";
//
//    while (1) {
//        UART2_Transmit_string(msg); // Gửi chuỗi
//        delay_ms(1000); // Đợi 1 giây
//    }
//}



//#include <stdint.h>
//
//// Định nghĩa địa chỉ thanh ghi
//#define RCC_BASE        0x40023800
//#define GPIOA_BASE      0x40020000
//#define GPIOC_BASE      0x40020800
//#define USART2_BASE     0x40004400
//
//// Thanh ghi RCC
//#define RCC_AHB1ENR     (*(volatile uint32_t *)(RCC_BASE + 0x30))
//#define RCC_APB1ENR     (*(volatile uint32_t *)(RCC_BASE + 0x40))
//
//// Thanh ghi GPIOA
//#define GPIOA_MODER     (*(volatile uint32_t *)(GPIOA_BASE + 0x00))
//#define GPIOA_AFRL      (*(volatile uint32_t *)(GPIOA_BASE + 0x20))
//
//// Thanh ghi GPIOC
//#define GPIOC_MODER     (*(volatile uint32_t *)(GPIOC_BASE + 0x00))
//#define GPIOC_PUPDR     (*(volatile uint32_t *)(GPIOC_BASE + 0x0C))
//#define GPIOC_IDR       (*(volatile uint32_t *)(GPIOC_BASE + 0x10))
//
//// Thanh ghi USART2
//#define USART2_SR       (*(volatile uint32_t *)(USART2_BASE + 0x00))
//#define USART2_DR       (*(volatile uint32_t *)(USART2_BASE + 0x04))
//#define USART2_BRR      (*(volatile uint32_t *)(USART2_BASE + 0x08))
//#define USART2_CR1      (*(volatile uint32_t *)(USART2_BASE + 0x0C))
//
//// Hàm delay đơn giản
//void delay_ms(uint32_t ms) {
//    for (uint32_t i = 0; i < ms * 8000; i++); // Ước lượng cho 16 MHz
//}
//
//// Hàm khởi tạo GPIO cho UART2 (PA2: TX, PA3: RX) và IR sensor (PC1)
//void GPIO_Init(void) {
//    // Bật clock cho GPIOA và GPIOC
//    RCC_AHB1ENR |= (1 << 0) | (1 << 2); // GPIOA, GPIOC
//
//    // Cấu hình PA2, PA3 là Alternate Function
//    GPIOA_MODER &= ~(3 << 4); // Xóa bit PA2
//    GPIOA_MODER |= (2 << 4);  // PA2: Alternate Function
//    GPIOA_MODER &= ~(3 << 6); // Xóa bit PA3
//    GPIOA_MODER |= (2 << 6);  // PA3: Alternate Function
//
//    // Gán PA2, PA3 cho USART2 (AF7)
//    GPIOA_AFRL &= ~(0xF << 8);  // Xóa bit AF cho PA2
//    GPIOA_AFRL |= (7 << 8);     // PA2: AF7
//    GPIOA_AFRL &= ~(0xF << 12); // Xóa bit AF cho PA3
//    GPIOA_AFRL |= (7 << 12);    // PA3: AF7
//
//    // Cấu hình PC1 là Input
//    GPIOC_MODER &= ~(3 << 2); // PC1: Input
//    GPIOC_PUPDR &= ~(3 << 2); // Xóa pull-up/pull-down
//    GPIOC_PUPDR |= (1 << 2);  // PC1: Pull-up
//}
//
//// Hàm khởi tạo UART2
//void UART2_Init(void) {
//    // Bật clock cho USART2
//    RCC_APB1ENR |= (1 << 17);
//
//    // Cấu hình Baud Rate = 115200, fCK = 16 MHz
//    USART2_BRR = (8 << 4) | 11; // DIV_Mantissa = 8, DIV_Fraction = 11
//
//    // Cấu hình USART2: 8 bits, 1 stop bit, no parity
//    USART2_CR1 = (1 << 13) | // Bật USART
//                 (1 << 3);   // Bật TX
//}
//
//// Hàm gửi một ký tự qua UART2
//void UART2_SendChar(char c) {
//    while (!(USART2_SR & (1 << 7))); // Chờ TXE (Transmit Data Register Empty)
//    USART2_DR = c; // Ghi ký tự vào DR
//}
//
//// Hàm gửi chuỗi qua UART2
//void UART2_SendString(char *str) {
//    while (*str) {
//        UART2_SendChar(*str++);
//    }
//}
//
//int main(void) {
//    // Khởi tạo GPIO và UART2
//    GPIO_Init();
//    UART2_Init();
//
//    // Biến lưu trạng thái cảm biến
//    uint8_t sensor_state;
//
//    while (1) {
//        // Đọc trạng thái từ PC1 (IR sensor)
//        sensor_state = (GPIOC_IDR >> 1) & 0x01; // Đọc bit 1 của IDR (PC1)
//
//        // Gửi trạng thái qua UART2
//        if (sensor_state == 0) {
//            UART2_SendString("Detected\r\n"); // Phát hiện vật cản
//        } else {
//            UART2_SendString("Not Detected\r\n"); // Không phát hiện
//        }
//
//        delay_ms(500); // Cập nhật mỗi 0.5 giây
//    }
//}


#include "stm32f4xx_hal.h"
#include <string.h>
#include <stdio.h>

ADC_HandleTypeDef hadc1;
UART_HandleTypeDef huart2;

// Hàm khởi tạo ADC1, Channel 11 (PC1)
void ADC1_Init(void) {
    __HAL_RCC_ADC1_CLK_ENABLE();

    hadc1.Instance = ADC1;
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
    hadc1.Init.ScanConvMode = DISABLE;
    hadc1.Init.ContinuousConvMode = DISABLE;
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    hadc1.Init.NbrOfConversion = 1;

    HAL_ADC_Init(&hadc1);

    ADC_ChannelConfTypeDef sConfig = {0};
    sConfig.Channel = ADC_CHANNEL_11;  // PC1
    sConfig.Rank = 1;
    sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
}

// Hàm khởi tạo UART2 (TX: PA2)
void UART2_Init(void) {
    __HAL_RCC_USART2_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();

    GPIO_InitTypeDef GPIO_InitStruct = {0};
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    huart2.Instance = USART2;
    huart2.Init.BaudRate = 115200;
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
    huart2.Init.StopBits = UART_STOPBITS_1;
    huart2.Init.Parity = UART_PARITY_NONE;
    huart2.Init.Mode = UART_MODE_TX_RX;
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
    HAL_UART_Init(&huart2);
}

// Hàm gửi chuỗi qua UART
void UART_Print(char *msg) {
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

int main(void) {
    HAL_Init();
    __HAL_RCC_GPIOC_CLK_ENABLE();  // Cho PC1
    UART2_Init();
    ADC1_Init();

    char msg[50];
    uint32_t value;

    while (1) {
        HAL_ADC_Start(&hadc1);
        if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
            value = HAL_ADC_GetValue(&hadc1);
            sprintf(msg, "ADC Value: %lu\r\n", value);
            UART_Print(msg);
        }
        HAL_Delay(500);
    }
}
