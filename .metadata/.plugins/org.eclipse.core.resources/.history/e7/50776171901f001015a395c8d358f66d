//#include <stdint.h>
//
//// Định nghĩa địa chỉ thanh ghi
//#define RCC_BASE        0x40023800
//#define GPIOA_BASE      0x40020000
//#define USART2_BASE     0x40004400
//
//// Thanh ghi RCC
//#define RCC_AHB1ENR     (*(volatile uint32_t *)(RCC_BASE + 0x30))
//#define RCC_APB1ENR     (*(volatile uint32_t *)(RCC_BASE + 0x40))
//
//// Thanh ghi GPIOA
//#define GPIOA_MODER     (*(volatile uint32_t *)(GPIOA_BASE + 0x00))
//#define GPIOA_AFRL      (*(volatile uint32_t *)(GPIOA_BASE + 0x20))
//
//// Thanh ghi USART2
//#define USART2_SR       (*(volatile uint32_t *)(USART2_BASE + 0x00))
//#define USART2_DR       (*(volatile uint32_t *)(USART2_BASE + 0x04))
//#define USART2_BRR      (*(volatile uint32_t *)(USART2_BASE + 0x08))
//#define USART2_CR1      (*(volatile uint32_t *)(USART2_BASE + 0x0C))
//
//// Hàm delay đơn giản
//void delay_ms(uint32_t ms) {
//    for (uint32_t i = 0; i < ms * 8000; i++); // Ước lượng cho 16 MHz
//}
//
//// Hàm khởi tạo GPIO cho UART2 (PA2: TX, PA3: RX)
//void GPIO_Init(void) {
//    RCC_AHB1ENR |= (1 << 0); // Bật clock cho GPIOA
//
//    // Cấu hình PA2, PA3 là Alternate Function
//    GPIOA_MODER &= ~(3 << 4); // Xóa bit PA2
//    GPIOA_MODER |= (2 << 4);  // PA2: Alternate Function
//    GPIOA_MODER &= ~(3 << 6); // Xóa bit PA3
//    GPIOA_MODER |= (2 << 6);  // PA3: Alternate Function
//
//    // Cấu hình Alternate Function AF7 (USART2) cho PA2, PA3
//    GPIOA_AFRL &= ~(0xF << 8); // Xóa bit AF cho PA2
//    GPIOA_AFRL |= (7 << 8);    // PA2: AF7
//    GPIOA_AFRL &= ~(0xF << 12); // Xóa bit AF cho PA3
//    GPIOA_AFRL |= (7 << 12);   // PA3: AF7
//}
//
//// Hàm khởi tạo UART2
//void UART2_Init(void) {
//    RCC_APB1ENR |= (1 << 17); // Bật clock cho USART2
//
//    // Cấu hình Baud Rate = 115200, fCK = 16 MHz
//    USART2_BRR = (8 << 4) | 11; // DIV_Mantissa = 8, DIV_Fraction = 11
//
//    // Cấu hình USART2: 8 bits, 1 stop bit, no parity
//    USART2_CR1 = (1 << 13) | // Bật USART
//                 (1 << 3);   // Bật TX
//                 // RX không cần bật do chỉ gửi dữ liệu
//}
//
//// Hàm gửi một ký tự qua UART2
//void UART2_Transmit_char(char c) {
//    while (!(USART2_SR & (1 << 7))); // Chờ TXE (Transmit Data Register Empty)
//    USART2_DR = c; // Ghi ký tự vào DR
//}
//
//// Hàm gửi chuỗi qua UART2
//void UART2_Transmit_string(char *str) {
//    while (*str) {
//        UART2_Transmit_char(*str++);
//    }
//}
//
//int main(void) {
//    // Khởi tạo GPIO và UART2
//    GPIO_Init();
//    UART2_Init();
//
//    // Chuỗi cần gửi
//    char *msg = "Hello Stm32\r\n";
//
//    while (1) {
//        UART2_Transmit_string(msg); // Gửi chuỗi
//        delay_ms(1000); // Đợi 1 giây
//    }
//}



//#include <stdint.h>
//
//// Định nghĩa địa chỉ thanh ghi
//#define RCC_BASE        0x40023800
//#define GPIOA_BASE      0x40020000
//#define GPIOC_BASE      0x40020800
//#define USART2_BASE     0x40004400
//
//// Thanh ghi RCC
//#define RCC_AHB1ENR     (*(volatile uint32_t *)(RCC_BASE + 0x30))
//#define RCC_APB1ENR     (*(volatile uint32_t *)(RCC_BASE + 0x40))
//
//// Thanh ghi GPIOA
//#define GPIOA_MODER     (*(volatile uint32_t *)(GPIOA_BASE + 0x00))
//#define GPIOA_AFRL      (*(volatile uint32_t *)(GPIOA_BASE + 0x20))
//
//// Thanh ghi GPIOC
//#define GPIOC_MODER     (*(volatile uint32_t *)(GPIOC_BASE + 0x00))
//#define GPIOC_PUPDR     (*(volatile uint32_t *)(GPIOC_BASE + 0x0C))
//#define GPIOC_IDR       (*(volatile uint32_t *)(GPIOC_BASE + 0x10))
//
//// Thanh ghi USART2
//#define USART2_SR       (*(volatile uint32_t *)(USART2_BASE + 0x00))
//#define USART2_DR       (*(volatile uint32_t *)(USART2_BASE + 0x04))
//#define USART2_BRR      (*(volatile uint32_t *)(USART2_BASE + 0x08))
//#define USART2_CR1      (*(volatile uint32_t *)(USART2_BASE + 0x0C))
//
//// Hàm delay đơn giản
//void delay_ms(uint32_t ms) {
//    for (uint32_t i = 0; i < ms * 8000; i++); // Ước lượng cho 16 MHz
//}
//
//// Hàm khởi tạo GPIO cho UART2 (PA2: TX, PA3: RX) và IR sensor (PC1)
//void GPIO_Init(void) {
//    // Bật clock cho GPIOA và GPIOC
//    RCC_AHB1ENR |= (1 << 0) | (1 << 2); // GPIOA, GPIOC
//
//    // Cấu hình PA2, PA3 là Alternate Function
//    GPIOA_MODER &= ~(3 << 4); // Xóa bit PA2
//    GPIOA_MODER |= (2 << 4);  // PA2: Alternate Function
//    GPIOA_MODER &= ~(3 << 6); // Xóa bit PA3
//    GPIOA_MODER |= (2 << 6);  // PA3: Alternate Function
//
//    // Gán PA2, PA3 cho USART2 (AF7)
//    GPIOA_AFRL &= ~(0xF << 8);  // Xóa bit AF cho PA2
//    GPIOA_AFRL |= (7 << 8);     // PA2: AF7
//    GPIOA_AFRL &= ~(0xF << 12); // Xóa bit AF cho PA3
//    GPIOA_AFRL |= (7 << 12);    // PA3: AF7
//
//    // Cấu hình PC1 là Input
//    GPIOC_MODER &= ~(3 << 2); // PC1: Input
//    GPIOC_PUPDR &= ~(3 << 2); // Xóa pull-up/pull-down
//    GPIOC_PUPDR |= (1 << 2);  // PC1: Pull-up
//}
//
//// Hàm khởi tạo UART2
//void UART2_Init(void) {
//    // Bật clock cho USART2
//    RCC_APB1ENR |= (1 << 17);
//
//    // Cấu hình Baud Rate = 115200, fCK = 16 MHz
//    USART2_BRR = (8 << 4) | 11; // DIV_Mantissa = 8, DIV_Fraction = 11
//
//    // Cấu hình USART2: 8 bits, 1 stop bit, no parity
//    USART2_CR1 = (1 << 13) | // Bật USART
//                 (1 << 3);   // Bật TX
//}
//
//// Hàm gửi một ký tự qua UART2
//void UART2_SendChar(char c) {
//    while (!(USART2_SR & (1 << 7))); // Chờ TXE (Transmit Data Register Empty)
//    USART2_DR = c; // Ghi ký tự vào DR
//}
//
//// Hàm gửi chuỗi qua UART2
//void UART2_SendString(char *str) {
//    while (*str) {
//        UART2_SendChar(*str++);
//    }
//}
//
//int main(void) {
//    // Khởi tạo GPIO và UART2
//    GPIO_Init();
//    UART2_Init();
//
//    // Biến lưu trạng thái cảm biến
//    uint8_t sensor_state;
//
//    while (1) {
//        // Đọc trạng thái từ PC1 (IR sensor)
//        sensor_state = (GPIOC_IDR >> 1) & 0x01; // Đọc bit 1 của IDR (PC1)
//
//        // Gửi trạng thái qua UART2
//        if (sensor_state == 0) {
//            UART2_SendString("Detected\r\n"); // Phát hiện vật cản
//        } else {
//            UART2_SendString("Not Detected\r\n"); // Không phát hiện
//        }
//
//        delay_ms(500); // Cập nhật mỗi 0.5 giây
//    }
//}


#include <stdint.h>

// Địa chỉ cơ bản
#define RCC_BASE        0x40023800
#define GPIOC_BASE      0x40020800
#define GPIOA_BASE      0x40020000
#define USART2_BASE     0x40004400
#define ADC1_BASE       0x40012000

// RCC
#define RCC_AHB1ENR     (*(volatile uint32_t*)(RCC_BASE + 0x30))
#define RCC_APB1ENR     (*(volatile uint32_t*)(RCC_BASE + 0x40))
#define RCC_APB2ENR     (*(volatile uint32_t*)(RCC_BASE + 0x44))

// GPIO
#define GPIOC_MODER     (*(volatile uint32_t*)(GPIOC_BASE + 0x00))
#define GPIOA_MODER     (*(volatile uint32_t*)(GPIOA_BASE + 0x00))
#define GPIOA_AFRL      (*(volatile uint32_t*)(GPIOA_BASE + 0x20))

// USART2
#define USART2_SR       (*(volatile uint32_t*)(USART2_BASE + 0x00))
#define USART2_DR       (*(volatile uint32_t*)(USART2_BASE + 0x04))
#define USART2_BRR      (*(volatile uint32_t*)(USART2_BASE + 0x08))
#define USART2_CR1      (*(volatile uint32_t*)(USART2_BASE + 0x0C))

// ADC1
#define ADC1_SR         (*(volatile uint32_t*)(ADC1_BASE + 0x00))
#define ADC1_CR1        (*(volatile uint32_t*)(ADC1_BASE + 0x04))
#define ADC1_CR2        (*(volatile uint32_t*)(ADC1_BASE + 0x08))
#define ADC1_SMPR1      (*(volatile uint32_t*)(ADC1_BASE + 0x0C))
#define ADC1_SQR1       (*(volatile uint32_t*)(ADC1_BASE + 0x2C))
#define ADC1_SQR3       (*(volatile uint32_t*)(ADC1_BASE + 0x30))
#define ADC1_DR         (*(volatile uint32_t*)(ADC1_BASE + 0x4C))

void delay_ms(uint32_t ms) {
    for (uint32_t i = 0; i < ms * 4000; i++) __asm__("nop");
}

void GPIO_UART_ADC_Init(void) {
    // Enable clock cho GPIOA và GPIOC
    RCC_AHB1ENR |= (1 << 0) | (1 << 2);

    // PA2, PA3 -> Alternate Function (USART2)
    GPIOA_MODER &= ~((3 << 4) | (3 << 6));
    GPIOA_MODER |=  ((2 << 4) | (2 << 6));
    GPIOA_AFRL  &= ~((0xF << 8) | (0xF << 12));
    GPIOA_AFRL  |=  ((7 << 8) | (7 << 12)); // AF7 = USART2

    // PC1 -> Analog mode
    GPIOC_MODER &= ~(3 << (1 * 2));
    GPIOC_MODER |=  (3 << (1 * 2)); // Analog mode
}

void UART2_Init(void) {
    RCC_APB1ENR |= (1 << 17); // Enable USART2

    USART2_BRR = (8 << 4) | 11; // Baudrate 115200 (16MHz)

    USART2_CR1 |= (1 << 13); // UE: USART Enable
    USART2_CR1 |= (1 << 3);  // TE: Transmit Enable
}

void UART2_SendChar(char c) {
    while (!(USART2_SR & (1 << 7))); // Wait TXE
    USART2_DR = c;
}

void UART2_SendString(char *str) {
    while (*str) {
        UART2_SendChar(*str++);
    }
}

void UART2_SendNumber(uint16_t num) {
    char buf[6];
    int i = 0;
    if (num == 0) {
        UART2_SendChar('0');
        return;
    }
    while (num > 0) {
        buf[i++] = (num % 10) + '0';
        num /= 10;
    }
    while (i > 0) {
        UART2_SendChar(buf[--i]);
    }
}

void ADC1_Init(void) {
    RCC_APB2ENR |= (1 << 8); // Enable ADC1

    ADC1_CR2 = 0;            // Disable ADC trước khi cấu hình
    ADC1_CR1 = 0;            // 12-bit resolution
    ADC1_SMPR1 |= (7 << 9);  // Channel 11 sample time = 480 cycles
    ADC1_SQR1 = 0;           // 1 conversion
    ADC1_SQR3 = 11;          // Channel 11 = PC1
    ADC1_CR2 |= (1 << 0);    // Bật ADC
}

uint16_t ADC1_Read(void) {
    ADC1_CR2 |= (1 << 30); // Start conversion
    while (!(ADC1_SR & (1 << 1))); // Wait EOC
    return ADC1_DR;
}

int main(void) {
    GPIO_UART_ADC_Init();
    UART2_Init();
    ADC1_Init();

    while (1) {
        uint16_t adc_value = ADC1_Read();
        UART2_SendString("ADC Value: ");
        UART2_SendNumber(adc_value);
        UART2_SendString("\r\n");
        delay_ms(500);
    }
}
