//#include "stm32f4xx.h"
//#include <stdint.h>
//
//// Hàm khởi tạo GPIOA để điều khiển LED
//void LED_Init(void) {
//    RCC->AHB1ENR |= 1 << 0;  // Bật clock cho GPIOA (bit 0 của AHB1ENR)
//    GPIOA->MODER |= (1 << (5 * 2));    // Đặt PA5 là Output (MODER5 = 01)
//    GPIOA->MODER &= ~(1 << (5 * 2 + 1));  // Đảm bảo chỉ bit 10 của PA5 là 1 (chế độ output)
//}
//
//// Hàm khởi tạo Timer2
//void Timer2_Init(void) {
//    RCC->APB1ENR |= (1 << 0);   // Bật clock cho Timer 2 (TIM2)
//
//    TIM2->PSC = 15999;   // Đặt giá trị chia tần số (Prescaler) là 15999
//    // -> F_Timer = 16MHz / (15999 + 1) = 1 kHz (1 tick = 1 ms)
//
//    TIM2->ARR = 1999;    // Đặt giá trị đếm tự động (Auto-Reload)
//    // -> Chu kỳ ngắt: (1999 + 1) / 1000 Hz = 2s
//
//    TIM2->DIER |= (1 << 0);  // Bật ngắt khi bộ đếm tràn (UIE = 1)
//    TIM2->CR1 |= (1 << 0);   // Bật Timer (CEN = 1)
//
//    NVIC_EnableIRQ(TIM2_IRQn);   // Cho phép ngắt Timer2 trong NVIC
//    NVIC_SetPriority(TIM2_IRQn, 0);  // Đặt độ ưu tiên cao nhất cho ngắt Timer2
//}
//
//// Hàm xử lý ngắt của Timer2
//void TIM2_IRQHandler(void) {
//    if (TIM2->SR & (1 << 0)) {  // Kiểm tra cờ ngắt tràn (Update Interrupt Flag)
//        static uint8_t toggle = 0;  // Biến trạng thái bật/tắt LED
//        toggle = !toggle;  // Đảo trạng thái LED
//
//        if (toggle) {
//            GPIOA->ODR |= (1 << 5);   // Bật LED (PA5 = 1)
//        } else {
//            GPIOA->ODR &= ~(1 << 5);  // Tắt LED (PA5 = 0)
//        }
//
//        TIM2->SR &= ~(1 << 0); // Xóa cờ ngắt để tránh lặp vô hạn
//    }
//}
//
//// Hàm main
//int main(void) {
//    LED_Init();
//    Timer2_Init();
//    while(1);    // Vòng lặp vô tận, chương trình chạy trong ngắt
//}


//#include "stm32f4xx.h"
//#include <stdint.h>
//
//void init_GPIO(void) {
//    RCC->AHB1ENR |= (1 << 0);         // Bật clock cho PORTA
//
//    GPIOA->MODER |= (1 << (5 * 2));   // PA5 output (LED)
//    GPIOA->MODER &= ~(1 << (5 * 2 + 1));
//}
//
//void init_TIM1(void) {
//    RCC->APB2ENR |= (1 << 0);         // Bật clock cho TIM1
//
//    TIM1->PSC = 15999;                   // Prescaler: 16 MHz / (15 + 1) = 1 MHz
//    TIM1->ARR = 3999;                  // Chu kỳ: 1 MHz / (999 + 1) = 1 kHz (1 ms)
//    TIM1->CR1 |= (1 << 4);            // Chế độ downcounter (DIR = 1)
//
//    // Cấu hình kênh 1 (CCR1) cho Capture/Compare
//    TIM1->CCMR1 |= (0 << 0);          // Chế độ Compare (Output Compare, không output)
//    TIM1->CCER |= (1 << 0);           // Bật kênh 1
//    TIM1->CCR1 = 1999;                 // 500 ms (bật LED tại đây)
//
//    TIM1->DIER |= (1 << 0);           // Bật ngắt Update
//    TIM1->DIER |= (1 << 1);           // Bật ngắt Capture/Compare kênh 1
//    TIM1->CR1 |= (1 << 0);            // Bật Timer
//
//    NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); // Bật ngắt Update
//    NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0); // Ưu tiên 0
//    NVIC_EnableIRQ(TIM1_CC_IRQn);      // Bật ngắt Capture/Compare
//    NVIC_SetPriority(TIM1_CC_IRQn, 0); // Ưu tiên 0
//}
//
//void TIM1_UP_TIM10_IRQHandler(void) {
//    if (TIM1->SR & (1 << 0)) {        // Ngắt Update (CNT = 0, sau 1000 ms)
//        GPIOA->ODR &= ~(1 << 5);      // Tắt LED PA5
//        TIM1->SR &= ~(1 << 0);        // Xóa cờ ngắt Update
//    }
//}
//
//void TIM1_CC_IRQHandler(void) {
//    if (TIM1->SR & (1 << 1)) {        // Ngắt Capture/Compare (CNT = CCR1, tại 500 ms)
//        GPIOA->ODR |= (1 << 5);       // Bật LED PA5
//        TIM1->SR &= ~(1 << 1);        // Xóa cờ ngắt Capture/Compare
//    }
//}
//
//int main(void) {
//    init_GPIO();
//    init_TIM1();
//
//    while (1) {
//        // Không cần làm gì trong main, mọi thứ được xử lý trong ngắt
//    }
//}


//#include "stm32f4xx.h"
//
//// Biến đếm để xác định thời gian bật/tắt LED
//volatile uint32_t count1 = 0;
//volatile uint32_t count2 = 0;
//volatile uint32_t count4 = 0;
//
//void GPIO_Init(void) {
//    // Bật xung clock cho GPIOA, GPIOB, GPIOC
//    RCC->AHB1ENR |= (1 << 0); // Bật clock GPIOA
//    RCC->AHB1ENR |= (1 << 1); // Bật clock GPIOB
//    RCC->AHB1ENR |= (1 << 2); // Bật clock GPIOC
//
//    // Cấu hình PA5 là output (MODER = 01)
//    GPIOA->MODER &= ~(3 << (5 * 2)); // Xóa 2 bit mode
//    GPIOA->MODER |=  (1 << (5 * 2)); // Đặt là output (01)
//
//    // Cấu hình PB6 là output
//    GPIOB->MODER &= ~(3 << (6 * 2));
//    GPIOB->MODER |=  (1 << (6 * 2));
//
//    // Cấu hình PC7 là output
//    GPIOC->MODER &= ~(3 << (7 * 2));
//    GPIOC->MODER |=  (1 << (7 * 2));
//}
//
//void TIM1_Init(void) {
//    // Bật clock cho Timer 1 (nằm trên bus APB2)
//    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
//
//    // Cấu hình Timer đếm 1ms mỗi lần:
//    // F_timer = 16 MHz / 16000 = 1 KHz => 1 ms/tick
//    TIM1->PSC = 16000 - 1;    // Prescaler = 15999
//
//    // Auto-reload value = 1 => mỗi 1 ms xảy ra update event
//    TIM1->ARR = 1;
//
//    // Cho phép ngắt khi có update (timer tràn)
//    TIM1->DIER |= TIM_DIER_UIE;
//
//    // Bật bộ đếm
//    TIM1->CR1 |= TIM_CR1_CEN;
//
//    // Đối với Timer nâng cao (Advanced timer), cần bật MOE để hoạt động
//    TIM1->BDTR |= TIM_BDTR_MOE;
//
//    // Bật ngắt trong NVIC (TIM1 dùng chung ngắt với TIM10)
//    NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
//}
//
//// Hàm xử lý ngắt khi Timer1 tràn (mỗi 1ms)
//void TIM1_UP_TIM10_IRQHandler(void) {
//    // Kiểm tra cờ ngắt update (UIF)
//    if (TIM1->SR & TIM_SR_UIF) {
//        TIM1->SR &= ~TIM_SR_UIF; // Xóa cờ ngắt
//
//        // Tăng các biến đếm thời gian
//        count1++;
//        count2++;
//        count4++;
//
//        // Nếu đủ 1000ms (1s) => Đảo trạng thái LED PA5
//        if (count1 >= 1000) {
//            GPIOA->ODR ^= (1 << 5); // Toggle PA5
//            count1 = 0;             // Reset biến đếm
//        }
//
//        // Nếu đủ 2000ms (2s) => Toggle PB6
//        if (count2 >= 2000) {
//            GPIOB->ODR ^= (1 << 6);
//            count2 = 0;
//        }
//
//        // Nếu đủ 4000ms (4s) => Toggle PC7
//        if (count4 >= 4000) {
//            GPIOC->ODR ^= (1 << 7);
//            count4 = 0;
//        }
//    }
//}
//
//int main(void) {
//    GPIO_Init();    // Cấu hình chân LED
//    TIM1_Init();    // Cấu hình Timer1 để tạo ngắt mỗi 1ms
//
//    while (1) {
//        // Vòng lặp chính không làm gì, LED nhấp nháy nhờ ngắt
//    }
//}

#include <stdint.h>

#define RCC_BASE        0x40023800
#define GPIOA_BASE      0x40020000
#define TIM2_BASE       0x40000000
#define TIM3_BASE       0x40000400

#define RCC_AHB1ENR     (*(volatile uint32_t*)(RCC_BASE + 0x30))
#define RCC_APB1ENR     (*(volatile uint32_t*)(RCC_BASE + 0x40))

#define GPIOA_MODER     (*(volatile uint32_t*)(GPIOA_BASE + 0x00))
#define GPIOA_AFRL      (*(volatile uint32_t*)(GPIOA_BASE + 0x20))

#define TIM2_PSC        (*(volatile uint32_t*)(TIM2_BASE + 0x28))
#define TIM2_ARR        (*(volatile uint32_t*)(TIM2_BASE + 0x2C))
#define TIM2_CCR1       (*(volatile uint32_t*)(TIM2_BASE + 0x34))
#define TIM2_CCMR1      (*(volatile uint32_t*)(TIM2_BASE + 0x18))
#define TIM2_CCER       (*(volatile uint32_t*)(TIM2_BASE + 0x20))
#define TIM2_CR1        (*(volatile uint32_t*)(TIM2_BASE + 0x00))

#define TIM3_PSC        (*(volatile uint32_t*)(TIM3_BASE + 0x28))
#define TIM3_ARR        (*(volatile uint32_t*)(TIM3_BASE + 0x2C))
#define TIM3_CNT        (*(volatile uint32_t*)(TIM3_BASE + 0x24))
#define TIM3_CR1        (*(volatile uint32_t*)(TIM3_BASE + 0x00))

void delay_ms(uint32_t ms) {
    TIM3_CNT = 0;
    while (TIM3_CNT < (ms * 1000));
}

void TIM3_init(void) {
    RCC_APB1ENR |= (1 << 1);         // Bật clock cho TIM3

    TIM3_PSC = 16 - 1;               // 84 MHz / 84 = 1 MHz -> 1 tick = 1 µs
    TIM3_ARR = 0xFFFFFFFF;           // Max giá trị đếm
    TIM3_CR1 |= (1 << 0);            // Bật counter
}

void TIM2_PWM_init(void) {
    RCC_AHB1ENR |= (1 << 0);         // Bật clock GPIOA
    RCC_APB1ENR |= (1 << 0);         // Bật clock TIM2

    // PA5 = Alternate Function (MODER5 = 0b10)
    GPIOA_MODER &= ~(0b11 << (5 * 2));
    GPIOA_MODER |=  (0b10 << (5 * 2));

    // AFRL5 = AF1 (TIM2_CH1)
    GPIOA_AFRL &= ~(0b1111 << (5 * 4));
    GPIOA_AFRL |=  (0b0001 << (5 * 4));

    // Cấu hình TIM2
    TIM2_PSC = 16 - 1;               // 1 MHz
    TIM2_ARR = 1000 - 1;             // PWM period = 1ms (1kHz)

    // PWM Mode 1: CCMR1 OC1M = 110
    TIM2_CCMR1 &= ~(0b111 << 4);
    TIM2_CCMR1 |=  (0b110 << 4);

    TIM2_CCMR1 |= (1 << 3);          // Cho phép preload

    TIM2_CCER |= (1 << 0);           // Kích hoạt output CH1

    TIM2_CR1 |= (1 << 7);            // Cho phép ARR preload
    TIM2_CR1 |= (1 << 0);            // Bật TIM2
}

int main(void) {
    TIM3_init();
    TIM2_PWM_init();

    while (1) {
        // Tăng sáng
        for (int duty = 0; duty <= 1000; duty += 50) {
            TIM2_CCR1 = duty;
            delay_ms(30);
        }

        // Giảm sáng
        for (int duty = 1000; duty >= 0; duty -= 50) {
            TIM2_CCR1 = duty;
            delay_ms(30);
        }
    }
}
