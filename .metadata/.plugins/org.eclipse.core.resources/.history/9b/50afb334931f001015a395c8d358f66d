#include <stdint.h>

// Định nghĩa địa chỉ thanh ghi
#define RCC_BASE        0x40023800
#define GPIOA_BASE      0x40020000
#define GPIOC_BASE      0x40020800
#define GPIOH_BASE      0x40021C00
#define USART2_BASE     0x40004400
#define ADC1_BASE       0x40012000
#define PWR_BASE        0x40007000

// Thanh ghi RCC
#define RCC_CR          (*(volatile uint32_t *)(RCC_BASE + 0x00))
#define RCC_PLLCFGR     (*(volatile uint32_t *)(RCC_BASE + 0x04))
#define RCC_CFGR        (*(volatile uint32_t *)(RCC_BASE + 0x08))
#define RCC_AHB1ENR     (*(volatile uint32_t *)(RCC_BASE + 0x30))
#define RCC_APB1ENR     (*(volatile uint32_t *)(RCC_BASE + 0x40))
#define RCC_APB2ENR     (*(volatile uint32_t *)(RCC_BASE + 0x44))

// Thanh ghi PWR
#define PWR_CR          (*(volatile uint32_t *)(PWR_BASE + 0x00))

// Thanh ghi GPIO
#define GPIOA_MODER     (*(volatile uint32_t *)(GPIOA_BASE + 0x00))
#define GPIOA_ODR       (*(volatile uint32_t *)(GPIOA_BASE + 0x14))
#define GPIOA_AFRL      (*(volatile uint32_t *)(GPIOA_BASE + 0x20))
#define GPIOC_MODER     (*(volatile uint32_t *)(GPIOC_BASE + 0x00))

// Thanh ghi USART2
#define USART2_SR       (*(volatile uint32_t *)(USART2_BASE + 0x00))
#define USART2_DR       (*(volatile uint32_t *)(USART2_BASE + 0x04))
#define USART2_BRR      (*(volatile uint32_t *)(USART2_BASE + 0x08))
#define USART2_CR1      (*(volatile uint32_t *)(USART2_BASE + 0x0C))

// Thanh ghi ADC1
#define ADC1_SR         (*(volatile uint32_t *)(ADC1_BASE + 0x00))
#define ADC1_CR1        (*(volatile uint32_t *)(ADC1_BASE + 0x04))
#define ADC1_CR2        (*(volatile uint32_t *)(ADC1_BASE + 0x08))
#define ADC1_SMPR1      (*(volatile uint32_t *)(ADC1_BASE + 0x0C))
#define ADC1_SQR1       (*(volatile uint32_t *)(ADC1_BASE + 0x2C))
#define ADC1_SQR3       (*(volatile uint32_t *)(ADC1_BASE + 0x30))
#define ADC1_DR         (*(volatile uint32_t *)(ADC1_BASE + 0x4C))

// Hàm delay đơn giản
void delay_ms(uint32_t ms) {
    for (uint32_t i = 0; i < ms * 42000; i++); // Ước lượng cho SYSCLK = 84 MHz
}

// Hàm cấu hình clock hệ thống (HSE = 16 MHz)
void SystemClock_Config(void) {
    // Bật PWR clock
    RCC_APB1ENR |= (1 << 28); // PWR clock enable

    // Cấu hình Voltage Scaling (Scale 2)
    PWR_CR &= ~(3 << 14); // Xóa VOS
    PWR_CR |= (2 << 14);  // VOS = Scale 2

    // Bật HSE
    RCC_CR |= (1 << 16); // HSEON
    while (!(RCC_CR & (1 << 17))); // Chờ HSERDY

    // Cấu hình PLL: PLLM = 16, PLLN = 336, PLLP = 4, PLLQ = 7, nguồn PLL = HSE
    RCC_PLLCFGR = (16 << 0) | (336 << 6) | (1 << 16) | (7 << 24) | (1 << 22); // PLLM, PLLN, PLLP, PLLQ, PLLSRC = HSE
    RCC_CR |= (1 << 24); // Bật PLL
    while (!(RCC_CR & (1 << 25))); // Chờ PLLRDY

    // Chọn PLL làm SYSCLK, AHB = DIV1, APB1 = DIV2, APB2 = DIV1
    RCC_CFGR = (2 << 0) | (4 << 10) | (0 << 13); // SW = PLL, PPRE1 = DIV2, PPRE2 = DIV1

    // Cập nhật latency Flash (2 wait states cho 84 MHz)
    *(volatile uint32_t *)(0x40023C00) = (2 << 0); // FLASH_ACR: LATENCY = 2WS
}

// Hàm khởi tạo GPIO (PA2, PA3 cho UART2, PC1 cho ADC, PA5 cho LED)
void GPIO_Init(void) {
    RCC_AHB1ENR |= (1 << 0) | (1 << 2); // Bật clock cho GPIOA, GPIOC

    // PA2, PA3: Alternate Function cho UART2
    GPIOA_MODER &= ~(3 << 4); // Xóa PA2
    GPIOA_MODER |= (2 << 4);  // PA2: AF
    GPIOA_MODER &= ~(3 << 6); // Xóa PA3
    GPIOA_MODER |= (2 << 6);  // PA3: AF
    GPIOA_AFRL &= ~(0xF << 8);  // Xóa AF cho PA2
    GPIOA_AFRL |= (7 << 8);     // PA2: AF7
    GPIOA_AFRL &= ~(0xF << 12); // Xóa AF cho PA3
    GPIOA_AFRL |= (7 << 12);    // PA3: AF7

    // PC1: Analog mode cho ADC
    GPIOC_MODER &= ~(3 << 2); // Xóa PC1
    GPIOC_MODER |= (3 << 2);  // PC1: Analog

    // PA5: Output cho LED (LD2)
    GPIOA_MODER &= ~(3 << 10); // Xóa PA5
    GPIOA_MODER |= (1 << 10);  // PA5: Output
}

// Hàm khởi tạo UART2
void UART2_Init(void) {
    RCC_APB1ENR |= (1 << 17); // Bật clock cho USART2
    USART2_BRR = (22 << 4) | 13; // Baud Rate = 115200, fCK = 42 MHz
    USART2_CR1 = (1 << 13) | (1 << 3); // Bật USART, TX
}

// Hàm khởi tạo ADC1 cho PC1 (kênh ADC1_IN11)
void ADC1_Init(void) {
    RCC_APB2ENR |= (1 <<  naturalistic8); // Bật clock cho ADC1
    ADC1_CR2 = 0; // Xóa CR2
    ADC1_CR1 = (0 << 8); // Độ phân giải 12-bit
    ADC1_SMPR1 = (7 << 9); // Thời gian lấy mẫu kênh 11: 480 cycles (tăng để ổn định)
    ADC1_SQR1 = (0 << 20); // 1 conversion
    ADC1_SQR3 = (11 << 0); // Kênh 11 (PC1)
    ADC1_CR2 |= (1 << 0); // Bật ADC
    while (!(ADC1_SR & (1 << 0))); // Chờ ADONS
}

// Hàm đọc giá trị ADC
uint32_t ADC1_Read(void) {
    ADC1_CR2 |= (1 << 30); // Bắt đầu chuyển đổi
    uint32_t timeout = 100000;
    while (!(ADC1_SR & (1 << 1)) && timeout--); // Chờ EOC
    if (timeout == 0) {
        UART2_SendString("ADC Timeout\r\n");
        return 0;
    }
    return ADC1_DR;
}

// Hàm gửi một ký tự qua UART2
void UART2_SendChar(char c) {
    while (!(USART2_SR & (1 << 7))); // Chờ TXE
    USART2_DR = c;
}

// Hàm chuyển số thành chuỗi
void UART2_SendNumber(uint32_t num) {
    char buffer[10];
    int i = 0;
    if (num == 0) {
        UART2_SendChar('0');
        return;
    }
    while (num > 0) {
        buffer[i++] = (num % 10) + '0';
        num /= 10;
    }
    while (i > 0) {
        UART2_SendChar(buffer[--i]);
    }
}

// Hàm gửi chuỗi qua UART2
void UART2_SendString(char *str) {
    while (*str) {
        UART2_SendChar(*str++);
    }
}

int main(void) {
    // Cấu hình clock hệ thống
    SystemClock_Config();

    // Khởi tạo GPIO, UART2, ADC1
    GPIO_Init();
    UART2_Init();
    ADC1_Init();

    // Kiểm tra PC1 Analog mode
    if (((GPIOC_MODER >> 2) & 0x3) != 3) {
        UART2_SendString("PC1 not in Analog mode\r\n");
        while (1);
    }

    // Kiểm tra kênh ADC
    if (ADC1_SQR3 != 11) {
        UART2_SendString("ADC Channel not 11\r\n");
        while (1);
    }

    // Gửi giá trị cố định để kiểm tra UART
    UART2_SendString("Test UART: ");
    UART2_SendNumber(1234);
    UART2_SendString("\r\n");
    delay_ms(1000);

    uint32_t adc_value;

    while (1) {
        // Toggle LED (PA5)
        GPIOA_ODR ^= (1 << 5);

        // Đọc giá trị ADC
        adc_value = ADC1_Read();
        if (adc_value == 0) {
            UART2_SendString("ADC Timeout\r\n");
        } else {
            UART2_SendString("ADC Value: ");
            UART2_SendNumber(adc_value);
            UART2_SendString("\r\n");
        }

        delay_ms(500); // Cập nhật mỗi 500ms
    }
}
