#include <stdint.h>
#include <stm32f4xx.h>

void delay_ms(uint32_t ms) {
    for (uint32_t i = 0; i < ms * 8000; i++); // Ước lượng cho 16 MHz
}

// Hàm khởi tạo GPIO cho UART2 (PA2: TX, PA3: RX) và IR sensor (PC1)
void GPIO_Init(void) {
    // Bật clock cho GPIOA, GPIOC
    RCC->AHB1ENR |= (1 << 0) | (1 << 2); // GPIOA, GPIOC

    // Cấu hình PA2, PA3 là Alternate Function cho UART2
    GPIOA->MODER &= ~(3 << 4); // Xóa bit PA2
    GPIOA->MODER |= (2 << 4);  // PA2: Alternate Function
    GPIOA->MODER &= ~(3 << 6); // Xóa bit PA3
    GPIOA->MODER |= (2 << 6);  // PA3: Alternate Function

    // Gán PA2, PA3 cho USART2 (AF7)
    GPIOA->AFR &= ~(0xF << 8);  // Xóa bit AF cho PA2
    GPIOA_AFRL |= (7 << 8);     // PA2: AF7
    GPIOA_AFRL &= ~(0xF << 12); // Xóa bit AF cho PA3
    GPIOA_AFRL |= (7 << 12);    // PA3: AF7

    // Cấu hình PC1 là Analog (ADC)
    GPIOC->MODER &= ~(3 << 2);  // Xóa bit cấu hình cho PC1
    GPIOC->MODER |= (3 << 2);   // Cấu hình PC1 là Analog
    GPIOC->PUPDR &= ~(3 << 2);  // Xóa Pull-up/Pull-down
}

// Hàm khởi tạo UART2
void UART2_Init(void) {
    // Bật clock cho USART2
    RCC->APB1ENR |= (1 << 17);

    // Cấu hình Baud Rate = 115200, fCK = 16 MHz
    USART2_BRR = (8 << 4) | 11; // DIV_Mantissa = 8, DIV_Fraction = 11

    // Cấu hình USART2: 8 bits, 1 stop bit, no parity
    USART2_CR1 = (1 << 13) | // Bật USART
                 (1 << 3);   // Bật TX
}

// Hàm gửi một ký tự qua UART2
void UART2_SendChar(char c) {
    while (!(USART2_SR & (1 << 7))); // Chờ TXE (Transmit Data Register Empty)
    USART2_DR = c; // Ghi ký tự vào DR
}

// Hàm gửi chuỗi qua UART2
void UART2_SendString(char *str) {
    while (*str) {
        UART2_SendChar(*str++);
    }
}

// Hàm khởi tạo ADC1
void ADC1_Init(void) {
    // Bật clock cho ADC1
    RCC_APB2ENR |= (1 << 8); // ADC1

    // Cấu hình ADC1: Kích hoạt ADC, chọn chế độ Scan cho nhiều kênh nếu cần
    ADC1_CR2 |= (1 << 0);    // Bật ADC
    ADC1_CR2 &= ~(1 << 1);   // Đặt chế độ Single Conversion
    ADC1_SMPR2 |= (7 << 3);  // Cấu hình Sample Time cho PC1 (ADC_CHANNEL_11)

    // Cấu hình kênh ADC cho PC1
    ADC1_SQR3 |= (11 << 0);  // Chọn kênh 11 cho PC1
}

// Hàm đọc giá trị ADC từ PC1
uint16_t ADC1_Read(void) {
    // Bắt đầu chuyển đổi
    ADC1_CR2 |= (1 << 30); // Bắt đầu chuyển đổi (SWSTART)

    // Chờ cho quá trình chuyển đổi hoàn thành
    while (!(ADC1_SR & (1 << 1))); // Kiểm tra bit EOC (End of Conversion)

    // Đọc giá trị từ ADC1
    return ADC1_DR & 0xFFF; // Trả về giá trị 12 bit
}

int main(void) {
    // Khởi tạo GPIO, UART2 và ADC1
    GPIO_Init();
    UART2_Init();
    ADC1_Init();

    uint16_t adc_value;

    while (1) {
        // Đọc giá trị từ cảm biến analog trên PC1
        adc_value = ADC1_Read();

        // Gửi giá trị ADC qua UART2
        char buffer[50];
        sprintf(buffer, "ADC Value: %d\r\n", adc_value);
        UART2_SendString(buffer);

        delay_ms(500); // Cập nhật mỗi 0.5 giây
    }
}
