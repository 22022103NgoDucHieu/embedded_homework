
motor_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800068c  0800068c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800068c  0800068c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800068c  0800068c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800068c  0800068c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800068c  0800068c  0001068c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000690  08000690  00010690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000694  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  08000698  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000698  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a3f  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000607  00000000  00000000  00021ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  000220c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000165  00000000  00000000  000222b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013db3  00000000  00000000  0002241d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000228b  00000000  00000000  000361d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fa93  00000000  00000000  0003845b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000061c  00000000  00000000  000b7ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b850c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000674 	.word	0x08000674

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000674 	.word	0x08000674

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <main>:
void Delay_ms(uint32_t ms);

volatile uint16_t pwm_value = 500;  // Mặc định 50% tốc độ
volatile int state = 0;  // Trạng thái điều khiển động cơ

int main(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    GPIO_Init();
 8000268:	f000 f864 	bl	8000334 <GPIO_Init>
    TIM2_PWM_Init();
 800026c:	f000 f8fe 	bl	800046c <TIM2_PWM_Init>
    EXTI_Init();
 8000270:	f000 f8b0 	bl	80003d4 <EXTI_Init>

    while (1) {
        // Kiểm tra nút nhấn tăng tốc (PA0)
        if (GPIOA->IDR & (1 << 0)) {
 8000274:	4b2c      	ldr	r3, [pc, #176]	; (8000328 <main+0xc4>)
 8000276:	691b      	ldr	r3, [r3, #16]
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d015      	beq.n	80002ac <main+0x48>
            if (pwm_value < 1000) pwm_value += 100;  // Giới hạn max 1000
 8000280:	4b2a      	ldr	r3, [pc, #168]	; (800032c <main+0xc8>)
 8000282:	881b      	ldrh	r3, [r3, #0]
 8000284:	b29b      	uxth	r3, r3
 8000286:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800028a:	d206      	bcs.n	800029a <main+0x36>
 800028c:	4b27      	ldr	r3, [pc, #156]	; (800032c <main+0xc8>)
 800028e:	881b      	ldrh	r3, [r3, #0]
 8000290:	b29b      	uxth	r3, r3
 8000292:	3364      	adds	r3, #100	; 0x64
 8000294:	b29a      	uxth	r2, r3
 8000296:	4b25      	ldr	r3, [pc, #148]	; (800032c <main+0xc8>)
 8000298:	801a      	strh	r2, [r3, #0]
            TIM2->CCR1 = pwm_value;
 800029a:	4b24      	ldr	r3, [pc, #144]	; (800032c <main+0xc8>)
 800029c:	881b      	ldrh	r3, [r3, #0]
 800029e:	b29a      	uxth	r2, r3
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a4:	635a      	str	r2, [r3, #52]	; 0x34
            Delay_ms(200);  // Chống dội phím
 80002a6:	20c8      	movs	r0, #200	; 0xc8
 80002a8:	f000 f92c 	bl	8000504 <Delay_ms>
        }

        if (GPIOA->IDR & (1 << 1)) {
 80002ac:	4b1e      	ldr	r3, [pc, #120]	; (8000328 <main+0xc4>)
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	f003 0302 	and.w	r3, r3, #2
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d018      	beq.n	80002ea <main+0x86>
                   if (pwm_value > 100) {
 80002b8:	4b1c      	ldr	r3, [pc, #112]	; (800032c <main+0xc8>)
 80002ba:	881b      	ldrh	r3, [r3, #0]
 80002bc:	b29b      	uxth	r3, r3
 80002be:	2b64      	cmp	r3, #100	; 0x64
 80002c0:	d907      	bls.n	80002d2 <main+0x6e>
                       pwm_value -= 100;
 80002c2:	4b1a      	ldr	r3, [pc, #104]	; (800032c <main+0xc8>)
 80002c4:	881b      	ldrh	r3, [r3, #0]
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	3b64      	subs	r3, #100	; 0x64
 80002ca:	b29a      	uxth	r2, r3
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <main+0xc8>)
 80002ce:	801a      	strh	r2, [r3, #0]
 80002d0:	e002      	b.n	80002d8 <main+0x74>
                   } else {
                       pwm_value = 0; // Nếu pwm < 100, giảm tiếp sẽ dừng hẳn
 80002d2:	4b16      	ldr	r3, [pc, #88]	; (800032c <main+0xc8>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	801a      	strh	r2, [r3, #0]
                   }
                   TIM2->CCR1 = pwm_value;
 80002d8:	4b14      	ldr	r3, [pc, #80]	; (800032c <main+0xc8>)
 80002da:	881b      	ldrh	r3, [r3, #0]
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e2:	635a      	str	r2, [r3, #52]	; 0x34
                   Delay_ms(200);  // Chống dội phím
 80002e4:	20c8      	movs	r0, #200	; 0xc8
 80002e6:	f000 f90d 	bl	8000504 <Delay_ms>
               }

        // Điều khiển hướng động cơ
        if (state == 0) {
 80002ea:	4b11      	ldr	r3, [pc, #68]	; (8000330 <main+0xcc>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d10c      	bne.n	800030c <main+0xa8>
            GPIOA->ODR |= (1 << 7);  // IN1 HIGH
 80002f2:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <main+0xc4>)
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	4a0c      	ldr	r2, [pc, #48]	; (8000328 <main+0xc4>)
 80002f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fc:	6153      	str	r3, [r2, #20]
            GPIOA->ODR &= ~(1 << 6); // IN2 LOW
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <main+0xc4>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a09      	ldr	r2, [pc, #36]	; (8000328 <main+0xc4>)
 8000304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000308:	6153      	str	r3, [r2, #20]
 800030a:	e7b3      	b.n	8000274 <main+0x10>
        } else {
            GPIOA->ODR |= (1 << 6);  // IN1 HIGH
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <main+0xc4>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a05      	ldr	r2, [pc, #20]	; (8000328 <main+0xc4>)
 8000312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000316:	6153      	str	r3, [r2, #20]
            GPIOA->ODR &= ~(1 << 7); // IN2 LOW
 8000318:	4b03      	ldr	r3, [pc, #12]	; (8000328 <main+0xc4>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a02      	ldr	r2, [pc, #8]	; (8000328 <main+0xc4>)
 800031e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000322:	6153      	str	r3, [r2, #20]
        if (GPIOA->IDR & (1 << 0)) {
 8000324:	e7a6      	b.n	8000274 <main+0x10>
 8000326:	bf00      	nop
 8000328:	40020000 	.word	0x40020000
 800032c:	20000000 	.word	0x20000000
 8000330:	20000020 	.word	0x20000020

08000334 <GPIO_Init>:
}

// ------------------------------
// ⚙ Khởi tạo GPIO
// ------------------------------
void GPIO_Init(void) {
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 0); // Bật clock GPIOA
 8000338:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <GPIO_Init+0x94>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4a22      	ldr	r2, [pc, #136]	; (80003c8 <GPIO_Init+0x94>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= (1 << 2); // Bật clock GPIOC
 8000344:	4b20      	ldr	r3, [pc, #128]	; (80003c8 <GPIO_Init+0x94>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a1f      	ldr	r2, [pc, #124]	; (80003c8 <GPIO_Init+0x94>)
 800034a:	f043 0304 	orr.w	r3, r3, #4
 800034e:	6313      	str	r3, [r2, #48]	; 0x30

    // PA6, PA7 là output (Điều khiển L298N)
    GPIOA->MODER |= (1 << (6 * 2)) | (1 << (7 * 2));
 8000350:	4b1e      	ldr	r3, [pc, #120]	; (80003cc <GPIO_Init+0x98>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a1d      	ldr	r2, [pc, #116]	; (80003cc <GPIO_Init+0x98>)
 8000356:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 800035a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~((1 << (6 * 2 + 1)) | (1 << (7 * 2 + 1)));
 800035c:	4b1b      	ldr	r3, [pc, #108]	; (80003cc <GPIO_Init+0x98>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1a      	ldr	r2, [pc, #104]	; (80003cc <GPIO_Init+0x98>)
 8000362:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8000366:	6013      	str	r3, [r2, #0]

    GPIOA->OTYPER &= ~((1 << 6) | (1 << 7)); // Push-Pull
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <GPIO_Init+0x98>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4a17      	ldr	r2, [pc, #92]	; (80003cc <GPIO_Init+0x98>)
 800036e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000372:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (3 << (6 * 2)) | (3 << (7 * 2)); // High Speed
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <GPIO_Init+0x98>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	4a14      	ldr	r2, [pc, #80]	; (80003cc <GPIO_Init+0x98>)
 800037a:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800037e:	6093      	str	r3, [r2, #8]

    // PA0, PA1 là input (Nút nhấn)
    GPIOA->MODER &= ~((3 << (0 * 2)) | (3 << (1 * 2)));
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <GPIO_Init+0x98>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <GPIO_Init+0x98>)
 8000386:	f023 030f 	bic.w	r3, r3, #15
 800038a:	6013      	str	r3, [r2, #0]

    // Kéo xuống GND (Pull-down)
    GPIOA->PUPDR |= (2 << (0 * 2)) | (2 << (1 * 2));
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <GPIO_Init+0x98>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <GPIO_Init+0x98>)
 8000392:	f043 030a 	orr.w	r3, r3, #10
 8000396:	60d3      	str	r3, [r2, #12]

    // PC13 là input với pull-up
    GPIOC->MODER &= ~(3 << (13 * 2));  // Chế độ input (00)
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <GPIO_Init+0x9c>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <GPIO_Init+0x9c>)
 800039e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80003a2:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3 << (13 * 2));  // Xóa cấu hình cũ
 80003a4:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <GPIO_Init+0x9c>)
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	4a09      	ldr	r2, [pc, #36]	; (80003d0 <GPIO_Init+0x9c>)
 80003aa:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80003ae:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= (1 << (13 * 2));   // Kéo lên (Pull-up)
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <GPIO_Init+0x9c>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	4a06      	ldr	r2, [pc, #24]	; (80003d0 <GPIO_Init+0x9c>)
 80003b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003ba:	60d3      	str	r3, [r2, #12]
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40020000 	.word	0x40020000
 80003d0:	40020800 	.word	0x40020800

080003d4 <EXTI_Init>:

// ------------------------------
// ⚙ Cấu hình EXTI (Ngắt ngoài) cho PC13
// ------------------------------
void EXTI_Init(void) {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 14);  // Bật clock SYSCFG
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <EXTI_Init+0x48>)
 80003da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003dc:	4a0f      	ldr	r2, [pc, #60]	; (800041c <EXTI_Init+0x48>)
 80003de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003e2:	6453      	str	r3, [r2, #68]	; 0x44

    SYSCFG->EXTICR[3] |= (2 << 4);  // EXTI13 kết nối với PC13
 80003e4:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <EXTI_Init+0x4c>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <EXTI_Init+0x4c>)
 80003ea:	f043 0320 	orr.w	r3, r3, #32
 80003ee:	6153      	str	r3, [r2, #20]

    EXTI->IMR |= (1 << 13);   // Bật ngắt EXTI13
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <EXTI_Init+0x50>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <EXTI_Init+0x50>)
 80003f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003fa:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 13);  // Kích hoạt ngắt cạnh xuống (Falling edge)
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <EXTI_Init+0x50>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	4a08      	ldr	r2, [pc, #32]	; (8000424 <EXTI_Init+0x50>)
 8000402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000406:	60d3      	str	r3, [r2, #12]

    NVIC_EnableIRQ(EXTI15_10_IRQn);  // Bật ngắt trong NVIC
 8000408:	2028      	movs	r0, #40	; 0x28
 800040a:	f7ff fee3 	bl	80001d4 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI15_10_IRQn, 2);  // Đặt mức ưu tiên
 800040e:	2102      	movs	r1, #2
 8000410:	2028      	movs	r0, #40	; 0x28
 8000412:	f7ff fefd 	bl	8000210 <__NVIC_SetPriority>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40023800 	.word	0x40023800
 8000420:	40013800 	.word	0x40013800
 8000424:	40013c00 	.word	0x40013c00

08000428 <EXTI15_10_IRQHandler>:

// ------------------------------
// ⚙ Trình xử lý ngắt EXTI (Ngắt PC13)
// ------------------------------
void EXTI15_10_IRQHandler(void) {
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 13)) {  // Kiểm tra nếu PC13 gây ngắt
 800042c:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <EXTI15_10_IRQHandler+0x3c>)
 800042e:	695b      	ldr	r3, [r3, #20]
 8000430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000434:	2b00      	cmp	r3, #0
 8000436:	d00f      	beq.n	8000458 <EXTI15_10_IRQHandler+0x30>
        state = !state;  // Đổi trạng thái
 8000438:	4b0b      	ldr	r3, [pc, #44]	; (8000468 <EXTI15_10_IRQHandler+0x40>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	bf0c      	ite	eq
 8000440:	2301      	moveq	r3, #1
 8000442:	2300      	movne	r3, #0
 8000444:	b2db      	uxtb	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <EXTI15_10_IRQHandler+0x40>)
 800044a:	601a      	str	r2, [r3, #0]
        EXTI->PR |= (1 << 13);  // Xóa cờ ngắt
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <EXTI15_10_IRQHandler+0x3c>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <EXTI15_10_IRQHandler+0x3c>)
 8000452:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000456:	6153      	str	r3, [r2, #20]
    }
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40013c00 	.word	0x40013c00
 8000468:	20000020 	.word	0x20000020

0800046c <TIM2_PWM_Init>:

// ------------------------------
// ⚙ Cấu hình TIM2 PWM trên PA5
// ------------------------------
void TIM2_PWM_Init(void) {
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 0); // Bật clock TIM2
 8000470:	4b21      	ldr	r3, [pc, #132]	; (80004f8 <TIM2_PWM_Init+0x8c>)
 8000472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000474:	4a20      	ldr	r2, [pc, #128]	; (80004f8 <TIM2_PWM_Init+0x8c>)
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->AHB1ENR |= (1 << 0); // Bật clock GPIOA
 800047c:	4b1e      	ldr	r3, [pc, #120]	; (80004f8 <TIM2_PWM_Init+0x8c>)
 800047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000480:	4a1d      	ldr	r2, [pc, #116]	; (80004f8 <TIM2_PWM_Init+0x8c>)
 8000482:	f043 0301 	orr.w	r3, r3, #1
 8000486:	6313      	str	r3, [r2, #48]	; 0x30

    // Cấu hình PA5 là AF1 (TIM2_CH1)
    GPIOA->MODER |= (2 << (5 * 2));
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <TIM2_PWM_Init+0x90>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a1b      	ldr	r2, [pc, #108]	; (80004fc <TIM2_PWM_Init+0x90>)
 800048e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000492:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (1 << (5 * 4)); // AF1 cho PA5
 8000494:	4b19      	ldr	r3, [pc, #100]	; (80004fc <TIM2_PWM_Init+0x90>)
 8000496:	6a1b      	ldr	r3, [r3, #32]
 8000498:	4a18      	ldr	r2, [pc, #96]	; (80004fc <TIM2_PWM_Init+0x90>)
 800049a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800049e:	6213      	str	r3, [r2, #32]

    TIM2->PSC = 84 - 1;    // Chia tần số xuống 1MHz
 80004a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004a4:	2253      	movs	r2, #83	; 0x53
 80004a6:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 1000 - 1;  // PWM tần số 1kHz
 80004a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004b0:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCR1 = pwm_value; // Mặc định duty cycle = 50%
 80004b2:	4b13      	ldr	r3, [pc, #76]	; (8000500 <TIM2_PWM_Init+0x94>)
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004bc:	635a      	str	r2, [r3, #52]	; 0x34

    TIM2->CCMR1 |= (6 << 4); // Chọn PWM mode 1 cho CH1
 80004be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80004cc:	6193      	str	r3, [r2, #24]
    TIM2->CCER |= (1 << 0);  // Bật CH1 output
 80004ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d2:	6a1b      	ldr	r3, [r3, #32]
 80004d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= (1 << 0);   // Bật TIM2
 80004de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6013      	str	r3, [r2, #0]
}
 80004ee:	bf00      	nop
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr
 80004f8:	40023800 	.word	0x40023800
 80004fc:	40020000 	.word	0x40020000
 8000500:	20000000 	.word	0x20000000

08000504 <Delay_ms>:

// ------------------------------
// ⚙ Delay chống dội phím
// ------------------------------
void Delay_ms(uint32_t ms) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 4000; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e003      	b.n	800051a <Delay_ms+0x16>
        __NOP();
 8000512:	bf00      	nop
    for (uint32_t i = 0; i < ms * 4000; i++) {
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3301      	adds	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000520:	fb02 f303 	mul.w	r3, r2, r3
 8000524:	68fa      	ldr	r2, [r7, #12]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3f3      	bcc.n	8000512 <Delay_ms+0xe>
    }
}
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800053c:	e7fe      	b.n	800053c <NMI_Handler+0x4>

0800053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler+0x4>

08000544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <MemManage_Handler+0x4>

0800054a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <BusFault_Handler+0x4>

08000550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <UsageFault_Handler+0x4>

08000556 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr

08000564 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr

08000580 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000584:	f000 f83e 	bl	8000604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000590:	4b06      	ldr	r3, [pc, #24]	; (80005ac <SystemInit+0x20>)
 8000592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000596:	4a05      	ldr	r2, [pc, #20]	; (80005ac <SystemInit+0x20>)
 8000598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800059c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	e000ed00 	.word	0xe000ed00

080005b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80005b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005b4:	480d      	ldr	r0, [pc, #52]	; (80005ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80005b6:	490e      	ldr	r1, [pc, #56]	; (80005f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0b      	ldr	r2, [pc, #44]	; (80005f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005cc:	4c0b      	ldr	r4, [pc, #44]	; (80005fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005da:	f7ff ffd7 	bl	800058c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005de:	f000 f825 	bl	800062c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005e2:	f7ff fe3f 	bl	8000264 <main>
  bx  lr    
 80005e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80005f4:	08000694 	.word	0x08000694
  ldr r2, =_sbss
 80005f8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80005fc:	20000028 	.word	0x20000028

08000600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000600:	e7fe      	b.n	8000600 <ADC_IRQHandler>
	...

08000604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x20>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_IncTick+0x24>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_IncTick+0x24>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000002 	.word	0x20000002
 8000628:	20000024 	.word	0x20000024

0800062c <__libc_init_array>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	4d0d      	ldr	r5, [pc, #52]	; (8000664 <__libc_init_array+0x38>)
 8000630:	4c0d      	ldr	r4, [pc, #52]	; (8000668 <__libc_init_array+0x3c>)
 8000632:	1b64      	subs	r4, r4, r5
 8000634:	10a4      	asrs	r4, r4, #2
 8000636:	2600      	movs	r6, #0
 8000638:	42a6      	cmp	r6, r4
 800063a:	d109      	bne.n	8000650 <__libc_init_array+0x24>
 800063c:	4d0b      	ldr	r5, [pc, #44]	; (800066c <__libc_init_array+0x40>)
 800063e:	4c0c      	ldr	r4, [pc, #48]	; (8000670 <__libc_init_array+0x44>)
 8000640:	f000 f818 	bl	8000674 <_init>
 8000644:	1b64      	subs	r4, r4, r5
 8000646:	10a4      	asrs	r4, r4, #2
 8000648:	2600      	movs	r6, #0
 800064a:	42a6      	cmp	r6, r4
 800064c:	d105      	bne.n	800065a <__libc_init_array+0x2e>
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f855 3b04 	ldr.w	r3, [r5], #4
 8000654:	4798      	blx	r3
 8000656:	3601      	adds	r6, #1
 8000658:	e7ee      	b.n	8000638 <__libc_init_array+0xc>
 800065a:	f855 3b04 	ldr.w	r3, [r5], #4
 800065e:	4798      	blx	r3
 8000660:	3601      	adds	r6, #1
 8000662:	e7f2      	b.n	800064a <__libc_init_array+0x1e>
 8000664:	0800068c 	.word	0x0800068c
 8000668:	0800068c 	.word	0x0800068c
 800066c:	0800068c 	.word	0x0800068c
 8000670:	08000690 	.word	0x08000690

08000674 <_init>:
 8000674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000676:	bf00      	nop
 8000678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800067a:	bc08      	pop	{r3}
 800067c:	469e      	mov	lr, r3
 800067e:	4770      	bx	lr

08000680 <_fini>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	bf00      	nop
 8000684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000686:	bc08      	pop	{r3}
 8000688:	469e      	mov	lr, r3
 800068a:	4770      	bx	lr
