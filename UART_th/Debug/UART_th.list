
UART_th.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08000f64  08000f64  00010f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fa8  08000fa8  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  08000fa8  08000fa8  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fa8  08000fa8  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fa8  08000fa8  00010fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fac  08000fac  00010fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08000fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  08001004  00020054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08001004  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001622  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000688  00000000  00000000  000216e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000218  00000000  00000000  00021d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000176  00000000  00000000  00021f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001516f  00000000  00000000  00022106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000028c4  00000000  00000000  00037275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d26f  00000000  00000000  00039b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000b84  00000000  00000000  000c6da8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000c792c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000f4c 	.word	0x08000f4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08000f4c 	.word	0x08000f4c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <delay_ms>:
#include <stdint.h>
#include <stm32f4xx.h>

void delay_ms(uint32_t ms) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 8000; i++); // Ước lượng cho 16 MHz
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	e002      	b.n	8000294 <delay_ms+0x14>
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	3301      	adds	r3, #1
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800029a:	fb02 f303 	mul.w	r3, r2, r3
 800029e:	68fa      	ldr	r2, [r7, #12]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	d3f4      	bcc.n	800028e <delay_ms+0xe>
}
 80002a4:	bf00      	nop
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
	...

080002b4 <GPIO_Init>:

// Hàm khởi tạo GPIO cho UART2 (PA2: TX, PA3: RX) và IR sensor (PC1)
void GPIO_Init(void) {
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
    // Bật clock cho GPIOA, GPIOC
    RCC->AHB1ENR |= (1 << 0) | (1 << 2); // GPIOA, GPIOC
 80002b8:	4b26      	ldr	r3, [pc, #152]	; (8000354 <GPIO_Init+0xa0>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a25      	ldr	r2, [pc, #148]	; (8000354 <GPIO_Init+0xa0>)
 80002be:	f043 0305 	orr.w	r3, r3, #5
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30

    // Cấu hình PA2, PA3 là Alternate Function cho UART2
    GPIOA->MODER &= ~(3 << 4); // Xóa bit PA2
 80002c4:	4b24      	ldr	r3, [pc, #144]	; (8000358 <GPIO_Init+0xa4>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a23      	ldr	r2, [pc, #140]	; (8000358 <GPIO_Init+0xa4>)
 80002ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80002ce:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << 4);  // PA2: Alternate Function
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <GPIO_Init+0xa4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a20      	ldr	r2, [pc, #128]	; (8000358 <GPIO_Init+0xa4>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(3 << 6); // Xóa bit PA3
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <GPIO_Init+0xa4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <GPIO_Init+0xa4>)
 80002e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002e6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << 6);  // PA3: Alternate Function
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <GPIO_Init+0xa4>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <GPIO_Init+0xa4>)
 80002ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002f2:	6013      	str	r3, [r2, #0]

    // Gán PA2, PA3 cho USART2 (AF7)
    GPIOA->AFR[0] &= ~(0xF << 8);  // Xóa bit AF cho PA2
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <GPIO_Init+0xa4>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <GPIO_Init+0xa4>)
 80002fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80002fe:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << 8);     // PA2: AF7
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <GPIO_Init+0xa4>)
 8000302:	6a1b      	ldr	r3, [r3, #32]
 8000304:	4a14      	ldr	r2, [pc, #80]	; (8000358 <GPIO_Init+0xa4>)
 8000306:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800030a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(0xF << 12); // Xóa bit AF cho PA3
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <GPIO_Init+0xa4>)
 800030e:	6a1b      	ldr	r3, [r3, #32]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <GPIO_Init+0xa4>)
 8000312:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000316:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << 12);    // PA3: AF7
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <GPIO_Init+0xa4>)
 800031a:	6a1b      	ldr	r3, [r3, #32]
 800031c:	4a0e      	ldr	r2, [pc, #56]	; (8000358 <GPIO_Init+0xa4>)
 800031e:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000322:	6213      	str	r3, [r2, #32]

    // Cấu hình PC1 là Analog (ADC)
    GPIOC->MODER &= ~(3 << 2);  // Xóa bit cấu hình cho PC1
 8000324:	4b0d      	ldr	r3, [pc, #52]	; (800035c <GPIO_Init+0xa8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a0c      	ldr	r2, [pc, #48]	; (800035c <GPIO_Init+0xa8>)
 800032a:	f023 030c 	bic.w	r3, r3, #12
 800032e:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (3 << 2);   // Cấu hình PC1 là Analog
 8000330:	4b0a      	ldr	r3, [pc, #40]	; (800035c <GPIO_Init+0xa8>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a09      	ldr	r2, [pc, #36]	; (800035c <GPIO_Init+0xa8>)
 8000336:	f043 030c 	orr.w	r3, r3, #12
 800033a:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3 << 2);  // Xóa Pull-up/Pull-down
 800033c:	4b07      	ldr	r3, [pc, #28]	; (800035c <GPIO_Init+0xa8>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	4a06      	ldr	r2, [pc, #24]	; (800035c <GPIO_Init+0xa8>)
 8000342:	f023 030c 	bic.w	r3, r3, #12
 8000346:	60d3      	str	r3, [r2, #12]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800
 8000358:	40020000 	.word	0x40020000
 800035c:	40020800 	.word	0x40020800

08000360 <UART2_Init>:

// Hàm khởi tạo UART2
void UART2_Init(void) {
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
    // Bật clock cho USART2
    RCC->APB1ENR |= (1 << 17);
 8000364:	4b08      	ldr	r3, [pc, #32]	; (8000388 <UART2_Init+0x28>)
 8000366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000368:	4a07      	ldr	r2, [pc, #28]	; (8000388 <UART2_Init+0x28>)
 800036a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036e:	6413      	str	r3, [r2, #64]	; 0x40

    // Cấu hình Baud Rate = 115200, fCK = 16 MHz
    USART2->BRR = (8 << 4) | 11; // DIV_Mantissa = 8, DIV_Fraction = 11
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <UART2_Init+0x2c>)
 8000372:	228b      	movs	r2, #139	; 0x8b
 8000374:	609a      	str	r2, [r3, #8]

    // Cấu hình USART2: 8 bits, 1 stop bit, no parity
    USART2->CR1 = (1 << 13) | // Bật USART
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <UART2_Init+0x2c>)
 8000378:	f242 0208 	movw	r2, #8200	; 0x2008
 800037c:	60da      	str	r2, [r3, #12]
                 (1 << 3);   // Bật TX
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	40023800 	.word	0x40023800
 800038c:	40004400 	.word	0x40004400

08000390 <UART2_SendChar>:

// Hàm gửi một ký tự qua UART2
void UART2_SendChar(char c) {
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & (1 << 7))); // Chờ TXE (Transmit Data Register Empty)
 800039a:	bf00      	nop
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <UART2_SendChar+0x2c>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d0f9      	beq.n	800039c <UART2_SendChar+0xc>
    USART2->DR = c; // Ghi ký tự vào DR
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <UART2_SendChar+0x2c>)
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	6053      	str	r3, [r2, #4]
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40004400 	.word	0x40004400

080003c0 <UART2_SendString>:

// Hàm gửi chuỗi qua UART2
void UART2_SendString(char *str) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
    while (*str) {
 80003c8:	e006      	b.n	80003d8 <UART2_SendString+0x18>
        UART2_SendChar(*str++);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	1c5a      	adds	r2, r3, #1
 80003ce:	607a      	str	r2, [r7, #4]
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ffdc 	bl	8000390 <UART2_SendChar>
    while (*str) {
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d1f4      	bne.n	80003ca <UART2_SendString+0xa>
    }
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	3708      	adds	r7, #8
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <ADC1_Init>:

// Hàm khởi tạo ADC1
void ADC1_Init(void) {
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
    // Bật clock cho ADC1
    RCC->APB2ENR |= (1 << 8); // ADC1
 80003f0:	4b11      	ldr	r3, [pc, #68]	; (8000438 <ADC1_Init+0x4c>)
 80003f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003f4:	4a10      	ldr	r2, [pc, #64]	; (8000438 <ADC1_Init+0x4c>)
 80003f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003fa:	6453      	str	r3, [r2, #68]	; 0x44

    // Cấu hình ADC1: Kích hoạt ADC, chọn chế độ Scan cho nhiều kênh nếu cần
    ADC1->CR2 |= (1 << 0);    // Bật ADC
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <ADC1_Init+0x50>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	4a0e      	ldr	r2, [pc, #56]	; (800043c <ADC1_Init+0x50>)
 8000402:	f043 0301 	orr.w	r3, r3, #1
 8000406:	6093      	str	r3, [r2, #8]
    ADC1->CR2 &= ~(1 << 1);   // Đặt chế độ Single Conversion
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <ADC1_Init+0x50>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	4a0b      	ldr	r2, [pc, #44]	; (800043c <ADC1_Init+0x50>)
 800040e:	f023 0302 	bic.w	r3, r3, #2
 8000412:	6093      	str	r3, [r2, #8]
    ADC1->SMPR2 |= (7 << 3);  // Cấu hình Sample Time cho PC1 (ADC_CHANNEL_11)
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <ADC1_Init+0x50>)
 8000416:	691b      	ldr	r3, [r3, #16]
 8000418:	4a08      	ldr	r2, [pc, #32]	; (800043c <ADC1_Init+0x50>)
 800041a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800041e:	6113      	str	r3, [r2, #16]

    // Cấu hình kênh ADC cho PC1
    ADC1->SQR3 |= (11 << 0);  // Chọn kênh 11 cho PC1
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <ADC1_Init+0x50>)
 8000422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000424:	4a05      	ldr	r2, [pc, #20]	; (800043c <ADC1_Init+0x50>)
 8000426:	f043 030b 	orr.w	r3, r3, #11
 800042a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40023800 	.word	0x40023800
 800043c:	40012000 	.word	0x40012000

08000440 <ADC1_Read>:

// Hàm đọc giá trị ADC từ PC1
uint16_t ADC1_Read(void) {
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
    // Bắt đầu chuyển đổi
    ADC1->CR2 |= (1 << 30); // Bắt đầu chuyển đổi (SWSTART)
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <ADC1_Read+0x34>)
 8000446:	689b      	ldr	r3, [r3, #8]
 8000448:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <ADC1_Read+0x34>)
 800044a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800044e:	6093      	str	r3, [r2, #8]

    // Chờ cho quá trình chuyển đổi hoàn thành
    while (!(ADC1->SR & (1 << 1))); // Kiểm tra bit EOC (End of Conversion)
 8000450:	bf00      	nop
 8000452:	4b08      	ldr	r3, [pc, #32]	; (8000474 <ADC1_Read+0x34>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f003 0302 	and.w	r3, r3, #2
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f9      	beq.n	8000452 <ADC1_Read+0x12>

    // Đọc giá trị từ ADC1
    return ADC1->DR & 0xFFF; // Trả về giá trị 12 bit
 800045e:	4b05      	ldr	r3, [pc, #20]	; (8000474 <ADC1_Read+0x34>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	b29b      	uxth	r3, r3
 8000464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000468:	b29b      	uxth	r3, r3
}
 800046a:	4618      	mov	r0, r3
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	40012000 	.word	0x40012000

08000478 <main>:

int main(void) {
 8000478:	b580      	push	{r7, lr}
 800047a:	b08e      	sub	sp, #56	; 0x38
 800047c:	af00      	add	r7, sp, #0
    // Khởi tạo GPIO, UART2 và ADC1
    GPIO_Init();
 800047e:	f7ff ff19 	bl	80002b4 <GPIO_Init>
    UART2_Init();
 8000482:	f7ff ff6d 	bl	8000360 <UART2_Init>
    ADC1_Init();
 8000486:	f7ff ffb1 	bl	80003ec <ADC1_Init>

    uint16_t adc_value;

    while (1) {
        // Đọc giá trị từ cảm biến analog trên PC1
        adc_value = ADC1_Read();
 800048a:	f7ff ffd9 	bl	8000440 <ADC1_Read>
 800048e:	4603      	mov	r3, r0
 8000490:	86fb      	strh	r3, [r7, #54]	; 0x36

        // Gửi giá trị ADC qua UART2
        char buffer[50];
        sprintf(buffer, "ADC Value: %d\r\n", adc_value);
 8000492:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	4906      	ldr	r1, [pc, #24]	; (80004b0 <main+0x38>)
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f8bb 	bl	8000614 <siprintf>
        UART2_SendString(buffer);
 800049e:	1d3b      	adds	r3, r7, #4
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff8d 	bl	80003c0 <UART2_SendString>

        delay_ms(500); // Cập nhật mỗi 0.5 giây
 80004a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004aa:	f7ff fee9 	bl	8000280 <delay_ms>
    while (1) {
 80004ae:	e7ec      	b.n	800048a <main+0x12>
 80004b0:	08000f64 	.word	0x08000f64

080004b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <NMI_Handler+0x4>

080004ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004be:	e7fe      	b.n	80004be <HardFault_Handler+0x4>

080004c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <MemManage_Handler+0x4>

080004c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <BusFault_Handler+0x4>

080004cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <UsageFault_Handler+0x4>

080004d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004f2:	bf00      	nop
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr

080004fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000500:	f000 f874 	bl	80005ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}

08000508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000510:	4a14      	ldr	r2, [pc, #80]	; (8000564 <_sbrk+0x5c>)
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <_sbrk+0x60>)
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <_sbrk+0x64>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000524:	4b11      	ldr	r3, [pc, #68]	; (800056c <_sbrk+0x64>)
 8000526:	4a12      	ldr	r2, [pc, #72]	; (8000570 <_sbrk+0x68>)
 8000528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800052a:	4b10      	ldr	r3, [pc, #64]	; (800056c <_sbrk+0x64>)
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	4413      	add	r3, r2
 8000532:	693a      	ldr	r2, [r7, #16]
 8000534:	429a      	cmp	r2, r3
 8000536:	d207      	bcs.n	8000548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000538:	f000 f88c 	bl	8000654 <__errno>
 800053c:	4603      	mov	r3, r0
 800053e:	220c      	movs	r2, #12
 8000540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000542:	f04f 33ff 	mov.w	r3, #4294967295
 8000546:	e009      	b.n	800055c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <_sbrk+0x64>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800054e:	4b07      	ldr	r3, [pc, #28]	; (800056c <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	4a05      	ldr	r2, [pc, #20]	; (800056c <_sbrk+0x64>)
 8000558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800055a:	68fb      	ldr	r3, [r7, #12]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3718      	adds	r7, #24
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20018000 	.word	0x20018000
 8000568:	00000400 	.word	0x00000400
 800056c:	20000070 	.word	0x20000070
 8000570:	200001c0 	.word	0x200001c0

08000574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <SystemInit+0x20>)
 800057a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800057e:	4a05      	ldr	r2, [pc, #20]	; (8000594 <SystemInit+0x20>)
 8000580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000588:	bf00      	nop
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000598:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800059e:	490e      	ldr	r1, [pc, #56]	; (80005d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80005a0:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005a4:	e002      	b.n	80005ac <LoopCopyDataInit>

080005a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005aa:	3304      	adds	r3, #4

080005ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005b0:	d3f9      	bcc.n	80005a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005b2:	4a0b      	ldr	r2, [pc, #44]	; (80005e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005b4:	4c0b      	ldr	r4, [pc, #44]	; (80005e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b8:	e001      	b.n	80005be <LoopFillZerobss>

080005ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005bc:	3204      	adds	r2, #4

080005be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005c0:	d3fb      	bcc.n	80005ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005c2:	f7ff ffd7 	bl	8000574 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005c6:	f000 f84b 	bl	8000660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ca:	f7ff ff55 	bl	8000478 <main>
  bx  lr    
 80005ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005d0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005d8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80005dc:	08000fb0 	.word	0x08000fb0
  ldr r2, =_sbss
 80005e0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80005e4:	200001c0 	.word	0x200001c0

080005e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005e8:	e7fe      	b.n	80005e8 <ADC_IRQHandler>
	...

080005ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_IncTick+0x20>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x24>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4413      	add	r3, r2
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_IncTick+0x24>)
 80005fe:	6013      	str	r3, [r2, #0]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000000 	.word	0x20000000
 8000610:	20000074 	.word	0x20000074

08000614 <siprintf>:
 8000614:	b40e      	push	{r1, r2, r3}
 8000616:	b500      	push	{lr}
 8000618:	b09c      	sub	sp, #112	; 0x70
 800061a:	ab1d      	add	r3, sp, #116	; 0x74
 800061c:	9002      	str	r0, [sp, #8]
 800061e:	9006      	str	r0, [sp, #24]
 8000620:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <siprintf+0x38>)
 8000626:	9107      	str	r1, [sp, #28]
 8000628:	9104      	str	r1, [sp, #16]
 800062a:	4909      	ldr	r1, [pc, #36]	; (8000650 <siprintf+0x3c>)
 800062c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000630:	9105      	str	r1, [sp, #20]
 8000632:	6800      	ldr	r0, [r0, #0]
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	a902      	add	r1, sp, #8
 8000638:	f000 f98a 	bl	8000950 <_svfiprintf_r>
 800063c:	9b02      	ldr	r3, [sp, #8]
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	b01c      	add	sp, #112	; 0x70
 8000644:	f85d eb04 	ldr.w	lr, [sp], #4
 8000648:	b003      	add	sp, #12
 800064a:	4770      	bx	lr
 800064c:	20000050 	.word	0x20000050
 8000650:	ffff0208 	.word	0xffff0208

08000654 <__errno>:
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <__errno+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000050 	.word	0x20000050

08000660 <__libc_init_array>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	4d0d      	ldr	r5, [pc, #52]	; (8000698 <__libc_init_array+0x38>)
 8000664:	4c0d      	ldr	r4, [pc, #52]	; (800069c <__libc_init_array+0x3c>)
 8000666:	1b64      	subs	r4, r4, r5
 8000668:	10a4      	asrs	r4, r4, #2
 800066a:	2600      	movs	r6, #0
 800066c:	42a6      	cmp	r6, r4
 800066e:	d109      	bne.n	8000684 <__libc_init_array+0x24>
 8000670:	4d0b      	ldr	r5, [pc, #44]	; (80006a0 <__libc_init_array+0x40>)
 8000672:	4c0c      	ldr	r4, [pc, #48]	; (80006a4 <__libc_init_array+0x44>)
 8000674:	f000 fc6a 	bl	8000f4c <_init>
 8000678:	1b64      	subs	r4, r4, r5
 800067a:	10a4      	asrs	r4, r4, #2
 800067c:	2600      	movs	r6, #0
 800067e:	42a6      	cmp	r6, r4
 8000680:	d105      	bne.n	800068e <__libc_init_array+0x2e>
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f855 3b04 	ldr.w	r3, [r5], #4
 8000688:	4798      	blx	r3
 800068a:	3601      	adds	r6, #1
 800068c:	e7ee      	b.n	800066c <__libc_init_array+0xc>
 800068e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000692:	4798      	blx	r3
 8000694:	3601      	adds	r6, #1
 8000696:	e7f2      	b.n	800067e <__libc_init_array+0x1e>
 8000698:	08000fa8 	.word	0x08000fa8
 800069c:	08000fa8 	.word	0x08000fa8
 80006a0:	08000fa8 	.word	0x08000fa8
 80006a4:	08000fac 	.word	0x08000fac

080006a8 <__retarget_lock_acquire_recursive>:
 80006a8:	4770      	bx	lr

080006aa <__retarget_lock_release_recursive>:
 80006aa:	4770      	bx	lr

080006ac <_free_r>:
 80006ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80006ae:	2900      	cmp	r1, #0
 80006b0:	d044      	beq.n	800073c <_free_r+0x90>
 80006b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80006b6:	9001      	str	r0, [sp, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	f1a1 0404 	sub.w	r4, r1, #4
 80006be:	bfb8      	it	lt
 80006c0:	18e4      	addlt	r4, r4, r3
 80006c2:	f000 f8df 	bl	8000884 <__malloc_lock>
 80006c6:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <_free_r+0x94>)
 80006c8:	9801      	ldr	r0, [sp, #4]
 80006ca:	6813      	ldr	r3, [r2, #0]
 80006cc:	b933      	cbnz	r3, 80006dc <_free_r+0x30>
 80006ce:	6063      	str	r3, [r4, #4]
 80006d0:	6014      	str	r4, [r2, #0]
 80006d2:	b003      	add	sp, #12
 80006d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80006d8:	f000 b8da 	b.w	8000890 <__malloc_unlock>
 80006dc:	42a3      	cmp	r3, r4
 80006de:	d908      	bls.n	80006f2 <_free_r+0x46>
 80006e0:	6825      	ldr	r5, [r4, #0]
 80006e2:	1961      	adds	r1, r4, r5
 80006e4:	428b      	cmp	r3, r1
 80006e6:	bf01      	itttt	eq
 80006e8:	6819      	ldreq	r1, [r3, #0]
 80006ea:	685b      	ldreq	r3, [r3, #4]
 80006ec:	1949      	addeq	r1, r1, r5
 80006ee:	6021      	streq	r1, [r4, #0]
 80006f0:	e7ed      	b.n	80006ce <_free_r+0x22>
 80006f2:	461a      	mov	r2, r3
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	b10b      	cbz	r3, 80006fc <_free_r+0x50>
 80006f8:	42a3      	cmp	r3, r4
 80006fa:	d9fa      	bls.n	80006f2 <_free_r+0x46>
 80006fc:	6811      	ldr	r1, [r2, #0]
 80006fe:	1855      	adds	r5, r2, r1
 8000700:	42a5      	cmp	r5, r4
 8000702:	d10b      	bne.n	800071c <_free_r+0x70>
 8000704:	6824      	ldr	r4, [r4, #0]
 8000706:	4421      	add	r1, r4
 8000708:	1854      	adds	r4, r2, r1
 800070a:	42a3      	cmp	r3, r4
 800070c:	6011      	str	r1, [r2, #0]
 800070e:	d1e0      	bne.n	80006d2 <_free_r+0x26>
 8000710:	681c      	ldr	r4, [r3, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	6053      	str	r3, [r2, #4]
 8000716:	440c      	add	r4, r1
 8000718:	6014      	str	r4, [r2, #0]
 800071a:	e7da      	b.n	80006d2 <_free_r+0x26>
 800071c:	d902      	bls.n	8000724 <_free_r+0x78>
 800071e:	230c      	movs	r3, #12
 8000720:	6003      	str	r3, [r0, #0]
 8000722:	e7d6      	b.n	80006d2 <_free_r+0x26>
 8000724:	6825      	ldr	r5, [r4, #0]
 8000726:	1961      	adds	r1, r4, r5
 8000728:	428b      	cmp	r3, r1
 800072a:	bf04      	itt	eq
 800072c:	6819      	ldreq	r1, [r3, #0]
 800072e:	685b      	ldreq	r3, [r3, #4]
 8000730:	6063      	str	r3, [r4, #4]
 8000732:	bf04      	itt	eq
 8000734:	1949      	addeq	r1, r1, r5
 8000736:	6021      	streq	r1, [r4, #0]
 8000738:	6054      	str	r4, [r2, #4]
 800073a:	e7ca      	b.n	80006d2 <_free_r+0x26>
 800073c:	b003      	add	sp, #12
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	200001b8 	.word	0x200001b8

08000744 <sbrk_aligned>:
 8000744:	b570      	push	{r4, r5, r6, lr}
 8000746:	4e0e      	ldr	r6, [pc, #56]	; (8000780 <sbrk_aligned+0x3c>)
 8000748:	460c      	mov	r4, r1
 800074a:	6831      	ldr	r1, [r6, #0]
 800074c:	4605      	mov	r5, r0
 800074e:	b911      	cbnz	r1, 8000756 <sbrk_aligned+0x12>
 8000750:	f000 fba6 	bl	8000ea0 <_sbrk_r>
 8000754:	6030      	str	r0, [r6, #0]
 8000756:	4621      	mov	r1, r4
 8000758:	4628      	mov	r0, r5
 800075a:	f000 fba1 	bl	8000ea0 <_sbrk_r>
 800075e:	1c43      	adds	r3, r0, #1
 8000760:	d00a      	beq.n	8000778 <sbrk_aligned+0x34>
 8000762:	1cc4      	adds	r4, r0, #3
 8000764:	f024 0403 	bic.w	r4, r4, #3
 8000768:	42a0      	cmp	r0, r4
 800076a:	d007      	beq.n	800077c <sbrk_aligned+0x38>
 800076c:	1a21      	subs	r1, r4, r0
 800076e:	4628      	mov	r0, r5
 8000770:	f000 fb96 	bl	8000ea0 <_sbrk_r>
 8000774:	3001      	adds	r0, #1
 8000776:	d101      	bne.n	800077c <sbrk_aligned+0x38>
 8000778:	f04f 34ff 	mov.w	r4, #4294967295
 800077c:	4620      	mov	r0, r4
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	200001bc 	.word	0x200001bc

08000784 <_malloc_r>:
 8000784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000788:	1ccd      	adds	r5, r1, #3
 800078a:	f025 0503 	bic.w	r5, r5, #3
 800078e:	3508      	adds	r5, #8
 8000790:	2d0c      	cmp	r5, #12
 8000792:	bf38      	it	cc
 8000794:	250c      	movcc	r5, #12
 8000796:	2d00      	cmp	r5, #0
 8000798:	4607      	mov	r7, r0
 800079a:	db01      	blt.n	80007a0 <_malloc_r+0x1c>
 800079c:	42a9      	cmp	r1, r5
 800079e:	d905      	bls.n	80007ac <_malloc_r+0x28>
 80007a0:	230c      	movs	r3, #12
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	2600      	movs	r6, #0
 80007a6:	4630      	mov	r0, r6
 80007a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000880 <_malloc_r+0xfc>
 80007b0:	f000 f868 	bl	8000884 <__malloc_lock>
 80007b4:	f8d8 3000 	ldr.w	r3, [r8]
 80007b8:	461c      	mov	r4, r3
 80007ba:	bb5c      	cbnz	r4, 8000814 <_malloc_r+0x90>
 80007bc:	4629      	mov	r1, r5
 80007be:	4638      	mov	r0, r7
 80007c0:	f7ff ffc0 	bl	8000744 <sbrk_aligned>
 80007c4:	1c43      	adds	r3, r0, #1
 80007c6:	4604      	mov	r4, r0
 80007c8:	d155      	bne.n	8000876 <_malloc_r+0xf2>
 80007ca:	f8d8 4000 	ldr.w	r4, [r8]
 80007ce:	4626      	mov	r6, r4
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d145      	bne.n	8000860 <_malloc_r+0xdc>
 80007d4:	2c00      	cmp	r4, #0
 80007d6:	d048      	beq.n	800086a <_malloc_r+0xe6>
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	4631      	mov	r1, r6
 80007dc:	4638      	mov	r0, r7
 80007de:	eb04 0903 	add.w	r9, r4, r3
 80007e2:	f000 fb5d 	bl	8000ea0 <_sbrk_r>
 80007e6:	4581      	cmp	r9, r0
 80007e8:	d13f      	bne.n	800086a <_malloc_r+0xe6>
 80007ea:	6821      	ldr	r1, [r4, #0]
 80007ec:	1a6d      	subs	r5, r5, r1
 80007ee:	4629      	mov	r1, r5
 80007f0:	4638      	mov	r0, r7
 80007f2:	f7ff ffa7 	bl	8000744 <sbrk_aligned>
 80007f6:	3001      	adds	r0, #1
 80007f8:	d037      	beq.n	800086a <_malloc_r+0xe6>
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	442b      	add	r3, r5
 80007fe:	6023      	str	r3, [r4, #0]
 8000800:	f8d8 3000 	ldr.w	r3, [r8]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d038      	beq.n	800087a <_malloc_r+0xf6>
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	42a2      	cmp	r2, r4
 800080c:	d12b      	bne.n	8000866 <_malloc_r+0xe2>
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	e00f      	b.n	8000834 <_malloc_r+0xb0>
 8000814:	6822      	ldr	r2, [r4, #0]
 8000816:	1b52      	subs	r2, r2, r5
 8000818:	d41f      	bmi.n	800085a <_malloc_r+0xd6>
 800081a:	2a0b      	cmp	r2, #11
 800081c:	d917      	bls.n	800084e <_malloc_r+0xca>
 800081e:	1961      	adds	r1, r4, r5
 8000820:	42a3      	cmp	r3, r4
 8000822:	6025      	str	r5, [r4, #0]
 8000824:	bf18      	it	ne
 8000826:	6059      	strne	r1, [r3, #4]
 8000828:	6863      	ldr	r3, [r4, #4]
 800082a:	bf08      	it	eq
 800082c:	f8c8 1000 	streq.w	r1, [r8]
 8000830:	5162      	str	r2, [r4, r5]
 8000832:	604b      	str	r3, [r1, #4]
 8000834:	4638      	mov	r0, r7
 8000836:	f104 060b 	add.w	r6, r4, #11
 800083a:	f000 f829 	bl	8000890 <__malloc_unlock>
 800083e:	f026 0607 	bic.w	r6, r6, #7
 8000842:	1d23      	adds	r3, r4, #4
 8000844:	1af2      	subs	r2, r6, r3
 8000846:	d0ae      	beq.n	80007a6 <_malloc_r+0x22>
 8000848:	1b9b      	subs	r3, r3, r6
 800084a:	50a3      	str	r3, [r4, r2]
 800084c:	e7ab      	b.n	80007a6 <_malloc_r+0x22>
 800084e:	42a3      	cmp	r3, r4
 8000850:	6862      	ldr	r2, [r4, #4]
 8000852:	d1dd      	bne.n	8000810 <_malloc_r+0x8c>
 8000854:	f8c8 2000 	str.w	r2, [r8]
 8000858:	e7ec      	b.n	8000834 <_malloc_r+0xb0>
 800085a:	4623      	mov	r3, r4
 800085c:	6864      	ldr	r4, [r4, #4]
 800085e:	e7ac      	b.n	80007ba <_malloc_r+0x36>
 8000860:	4634      	mov	r4, r6
 8000862:	6876      	ldr	r6, [r6, #4]
 8000864:	e7b4      	b.n	80007d0 <_malloc_r+0x4c>
 8000866:	4613      	mov	r3, r2
 8000868:	e7cc      	b.n	8000804 <_malloc_r+0x80>
 800086a:	230c      	movs	r3, #12
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4638      	mov	r0, r7
 8000870:	f000 f80e 	bl	8000890 <__malloc_unlock>
 8000874:	e797      	b.n	80007a6 <_malloc_r+0x22>
 8000876:	6025      	str	r5, [r4, #0]
 8000878:	e7dc      	b.n	8000834 <_malloc_r+0xb0>
 800087a:	605b      	str	r3, [r3, #4]
 800087c:	deff      	udf	#255	; 0xff
 800087e:	bf00      	nop
 8000880:	200001b8 	.word	0x200001b8

08000884 <__malloc_lock>:
 8000884:	4801      	ldr	r0, [pc, #4]	; (800088c <__malloc_lock+0x8>)
 8000886:	f7ff bf0f 	b.w	80006a8 <__retarget_lock_acquire_recursive>
 800088a:	bf00      	nop
 800088c:	200001b4 	.word	0x200001b4

08000890 <__malloc_unlock>:
 8000890:	4801      	ldr	r0, [pc, #4]	; (8000898 <__malloc_unlock+0x8>)
 8000892:	f7ff bf0a 	b.w	80006aa <__retarget_lock_release_recursive>
 8000896:	bf00      	nop
 8000898:	200001b4 	.word	0x200001b4

0800089c <__ssputs_r>:
 800089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a0:	688e      	ldr	r6, [r1, #8]
 80008a2:	461f      	mov	r7, r3
 80008a4:	42be      	cmp	r6, r7
 80008a6:	680b      	ldr	r3, [r1, #0]
 80008a8:	4682      	mov	sl, r0
 80008aa:	460c      	mov	r4, r1
 80008ac:	4690      	mov	r8, r2
 80008ae:	d82c      	bhi.n	800090a <__ssputs_r+0x6e>
 80008b0:	898a      	ldrh	r2, [r1, #12]
 80008b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80008b6:	d026      	beq.n	8000906 <__ssputs_r+0x6a>
 80008b8:	6965      	ldr	r5, [r4, #20]
 80008ba:	6909      	ldr	r1, [r1, #16]
 80008bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80008c0:	eba3 0901 	sub.w	r9, r3, r1
 80008c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80008c8:	1c7b      	adds	r3, r7, #1
 80008ca:	444b      	add	r3, r9
 80008cc:	106d      	asrs	r5, r5, #1
 80008ce:	429d      	cmp	r5, r3
 80008d0:	bf38      	it	cc
 80008d2:	461d      	movcc	r5, r3
 80008d4:	0553      	lsls	r3, r2, #21
 80008d6:	d527      	bpl.n	8000928 <__ssputs_r+0x8c>
 80008d8:	4629      	mov	r1, r5
 80008da:	f7ff ff53 	bl	8000784 <_malloc_r>
 80008de:	4606      	mov	r6, r0
 80008e0:	b360      	cbz	r0, 800093c <__ssputs_r+0xa0>
 80008e2:	6921      	ldr	r1, [r4, #16]
 80008e4:	464a      	mov	r2, r9
 80008e6:	f000 faeb 	bl	8000ec0 <memcpy>
 80008ea:	89a3      	ldrh	r3, [r4, #12]
 80008ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80008f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f4:	81a3      	strh	r3, [r4, #12]
 80008f6:	6126      	str	r6, [r4, #16]
 80008f8:	6165      	str	r5, [r4, #20]
 80008fa:	444e      	add	r6, r9
 80008fc:	eba5 0509 	sub.w	r5, r5, r9
 8000900:	6026      	str	r6, [r4, #0]
 8000902:	60a5      	str	r5, [r4, #8]
 8000904:	463e      	mov	r6, r7
 8000906:	42be      	cmp	r6, r7
 8000908:	d900      	bls.n	800090c <__ssputs_r+0x70>
 800090a:	463e      	mov	r6, r7
 800090c:	6820      	ldr	r0, [r4, #0]
 800090e:	4632      	mov	r2, r6
 8000910:	4641      	mov	r1, r8
 8000912:	f000 faab 	bl	8000e6c <memmove>
 8000916:	68a3      	ldr	r3, [r4, #8]
 8000918:	1b9b      	subs	r3, r3, r6
 800091a:	60a3      	str	r3, [r4, #8]
 800091c:	6823      	ldr	r3, [r4, #0]
 800091e:	4433      	add	r3, r6
 8000920:	6023      	str	r3, [r4, #0]
 8000922:	2000      	movs	r0, #0
 8000924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000928:	462a      	mov	r2, r5
 800092a:	f000 fad7 	bl	8000edc <_realloc_r>
 800092e:	4606      	mov	r6, r0
 8000930:	2800      	cmp	r0, #0
 8000932:	d1e0      	bne.n	80008f6 <__ssputs_r+0x5a>
 8000934:	6921      	ldr	r1, [r4, #16]
 8000936:	4650      	mov	r0, sl
 8000938:	f7ff feb8 	bl	80006ac <_free_r>
 800093c:	230c      	movs	r3, #12
 800093e:	f8ca 3000 	str.w	r3, [sl]
 8000942:	89a3      	ldrh	r3, [r4, #12]
 8000944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000948:	81a3      	strh	r3, [r4, #12]
 800094a:	f04f 30ff 	mov.w	r0, #4294967295
 800094e:	e7e9      	b.n	8000924 <__ssputs_r+0x88>

08000950 <_svfiprintf_r>:
 8000950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000954:	4698      	mov	r8, r3
 8000956:	898b      	ldrh	r3, [r1, #12]
 8000958:	061b      	lsls	r3, r3, #24
 800095a:	b09d      	sub	sp, #116	; 0x74
 800095c:	4607      	mov	r7, r0
 800095e:	460d      	mov	r5, r1
 8000960:	4614      	mov	r4, r2
 8000962:	d50e      	bpl.n	8000982 <_svfiprintf_r+0x32>
 8000964:	690b      	ldr	r3, [r1, #16]
 8000966:	b963      	cbnz	r3, 8000982 <_svfiprintf_r+0x32>
 8000968:	2140      	movs	r1, #64	; 0x40
 800096a:	f7ff ff0b 	bl	8000784 <_malloc_r>
 800096e:	6028      	str	r0, [r5, #0]
 8000970:	6128      	str	r0, [r5, #16]
 8000972:	b920      	cbnz	r0, 800097e <_svfiprintf_r+0x2e>
 8000974:	230c      	movs	r3, #12
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	e0d0      	b.n	8000b20 <_svfiprintf_r+0x1d0>
 800097e:	2340      	movs	r3, #64	; 0x40
 8000980:	616b      	str	r3, [r5, #20]
 8000982:	2300      	movs	r3, #0
 8000984:	9309      	str	r3, [sp, #36]	; 0x24
 8000986:	2320      	movs	r3, #32
 8000988:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800098c:	f8cd 800c 	str.w	r8, [sp, #12]
 8000990:	2330      	movs	r3, #48	; 0x30
 8000992:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000b38 <_svfiprintf_r+0x1e8>
 8000996:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800099a:	f04f 0901 	mov.w	r9, #1
 800099e:	4623      	mov	r3, r4
 80009a0:	469a      	mov	sl, r3
 80009a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009a6:	b10a      	cbz	r2, 80009ac <_svfiprintf_r+0x5c>
 80009a8:	2a25      	cmp	r2, #37	; 0x25
 80009aa:	d1f9      	bne.n	80009a0 <_svfiprintf_r+0x50>
 80009ac:	ebba 0b04 	subs.w	fp, sl, r4
 80009b0:	d00b      	beq.n	80009ca <_svfiprintf_r+0x7a>
 80009b2:	465b      	mov	r3, fp
 80009b4:	4622      	mov	r2, r4
 80009b6:	4629      	mov	r1, r5
 80009b8:	4638      	mov	r0, r7
 80009ba:	f7ff ff6f 	bl	800089c <__ssputs_r>
 80009be:	3001      	adds	r0, #1
 80009c0:	f000 80a9 	beq.w	8000b16 <_svfiprintf_r+0x1c6>
 80009c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80009c6:	445a      	add	r2, fp
 80009c8:	9209      	str	r2, [sp, #36]	; 0x24
 80009ca:	f89a 3000 	ldrb.w	r3, [sl]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	f000 80a1 	beq.w	8000b16 <_svfiprintf_r+0x1c6>
 80009d4:	2300      	movs	r3, #0
 80009d6:	f04f 32ff 	mov.w	r2, #4294967295
 80009da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009de:	f10a 0a01 	add.w	sl, sl, #1
 80009e2:	9304      	str	r3, [sp, #16]
 80009e4:	9307      	str	r3, [sp, #28]
 80009e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80009ea:	931a      	str	r3, [sp, #104]	; 0x68
 80009ec:	4654      	mov	r4, sl
 80009ee:	2205      	movs	r2, #5
 80009f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009f4:	4850      	ldr	r0, [pc, #320]	; (8000b38 <_svfiprintf_r+0x1e8>)
 80009f6:	f7ff fbf3 	bl	80001e0 <memchr>
 80009fa:	9a04      	ldr	r2, [sp, #16]
 80009fc:	b9d8      	cbnz	r0, 8000a36 <_svfiprintf_r+0xe6>
 80009fe:	06d0      	lsls	r0, r2, #27
 8000a00:	bf44      	itt	mi
 8000a02:	2320      	movmi	r3, #32
 8000a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a08:	0711      	lsls	r1, r2, #28
 8000a0a:	bf44      	itt	mi
 8000a0c:	232b      	movmi	r3, #43	; 0x2b
 8000a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000a12:	f89a 3000 	ldrb.w	r3, [sl]
 8000a16:	2b2a      	cmp	r3, #42	; 0x2a
 8000a18:	d015      	beq.n	8000a46 <_svfiprintf_r+0xf6>
 8000a1a:	9a07      	ldr	r2, [sp, #28]
 8000a1c:	4654      	mov	r4, sl
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f04f 0c0a 	mov.w	ip, #10
 8000a24:	4621      	mov	r1, r4
 8000a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a2a:	3b30      	subs	r3, #48	; 0x30
 8000a2c:	2b09      	cmp	r3, #9
 8000a2e:	d94d      	bls.n	8000acc <_svfiprintf_r+0x17c>
 8000a30:	b1b0      	cbz	r0, 8000a60 <_svfiprintf_r+0x110>
 8000a32:	9207      	str	r2, [sp, #28]
 8000a34:	e014      	b.n	8000a60 <_svfiprintf_r+0x110>
 8000a36:	eba0 0308 	sub.w	r3, r0, r8
 8000a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	9304      	str	r3, [sp, #16]
 8000a42:	46a2      	mov	sl, r4
 8000a44:	e7d2      	b.n	80009ec <_svfiprintf_r+0x9c>
 8000a46:	9b03      	ldr	r3, [sp, #12]
 8000a48:	1d19      	adds	r1, r3, #4
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	9103      	str	r1, [sp, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	bfbb      	ittet	lt
 8000a52:	425b      	neglt	r3, r3
 8000a54:	f042 0202 	orrlt.w	r2, r2, #2
 8000a58:	9307      	strge	r3, [sp, #28]
 8000a5a:	9307      	strlt	r3, [sp, #28]
 8000a5c:	bfb8      	it	lt
 8000a5e:	9204      	strlt	r2, [sp, #16]
 8000a60:	7823      	ldrb	r3, [r4, #0]
 8000a62:	2b2e      	cmp	r3, #46	; 0x2e
 8000a64:	d10c      	bne.n	8000a80 <_svfiprintf_r+0x130>
 8000a66:	7863      	ldrb	r3, [r4, #1]
 8000a68:	2b2a      	cmp	r3, #42	; 0x2a
 8000a6a:	d134      	bne.n	8000ad6 <_svfiprintf_r+0x186>
 8000a6c:	9b03      	ldr	r3, [sp, #12]
 8000a6e:	1d1a      	adds	r2, r3, #4
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	9203      	str	r2, [sp, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	bfb8      	it	lt
 8000a78:	f04f 33ff 	movlt.w	r3, #4294967295
 8000a7c:	3402      	adds	r4, #2
 8000a7e:	9305      	str	r3, [sp, #20]
 8000a80:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000b48 <_svfiprintf_r+0x1f8>
 8000a84:	7821      	ldrb	r1, [r4, #0]
 8000a86:	2203      	movs	r2, #3
 8000a88:	4650      	mov	r0, sl
 8000a8a:	f7ff fba9 	bl	80001e0 <memchr>
 8000a8e:	b138      	cbz	r0, 8000aa0 <_svfiprintf_r+0x150>
 8000a90:	9b04      	ldr	r3, [sp, #16]
 8000a92:	eba0 000a 	sub.w	r0, r0, sl
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	4082      	lsls	r2, r0
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	3401      	adds	r4, #1
 8000a9e:	9304      	str	r3, [sp, #16]
 8000aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aa4:	4825      	ldr	r0, [pc, #148]	; (8000b3c <_svfiprintf_r+0x1ec>)
 8000aa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000aaa:	2206      	movs	r2, #6
 8000aac:	f7ff fb98 	bl	80001e0 <memchr>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d038      	beq.n	8000b26 <_svfiprintf_r+0x1d6>
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <_svfiprintf_r+0x1f0>)
 8000ab6:	bb1b      	cbnz	r3, 8000b00 <_svfiprintf_r+0x1b0>
 8000ab8:	9b03      	ldr	r3, [sp, #12]
 8000aba:	3307      	adds	r3, #7
 8000abc:	f023 0307 	bic.w	r3, r3, #7
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	9303      	str	r3, [sp, #12]
 8000ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ac6:	4433      	add	r3, r6
 8000ac8:	9309      	str	r3, [sp, #36]	; 0x24
 8000aca:	e768      	b.n	800099e <_svfiprintf_r+0x4e>
 8000acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ad0:	460c      	mov	r4, r1
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	e7a6      	b.n	8000a24 <_svfiprintf_r+0xd4>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	3401      	adds	r4, #1
 8000ada:	9305      	str	r3, [sp, #20]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 0c0a 	mov.w	ip, #10
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ae8:	3a30      	subs	r2, #48	; 0x30
 8000aea:	2a09      	cmp	r2, #9
 8000aec:	d903      	bls.n	8000af6 <_svfiprintf_r+0x1a6>
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0c6      	beq.n	8000a80 <_svfiprintf_r+0x130>
 8000af2:	9105      	str	r1, [sp, #20]
 8000af4:	e7c4      	b.n	8000a80 <_svfiprintf_r+0x130>
 8000af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000afa:	4604      	mov	r4, r0
 8000afc:	2301      	movs	r3, #1
 8000afe:	e7f0      	b.n	8000ae2 <_svfiprintf_r+0x192>
 8000b00:	ab03      	add	r3, sp, #12
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	462a      	mov	r2, r5
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <_svfiprintf_r+0x1f4>)
 8000b08:	a904      	add	r1, sp, #16
 8000b0a:	4638      	mov	r0, r7
 8000b0c:	f3af 8000 	nop.w
 8000b10:	1c42      	adds	r2, r0, #1
 8000b12:	4606      	mov	r6, r0
 8000b14:	d1d6      	bne.n	8000ac4 <_svfiprintf_r+0x174>
 8000b16:	89ab      	ldrh	r3, [r5, #12]
 8000b18:	065b      	lsls	r3, r3, #25
 8000b1a:	f53f af2d 	bmi.w	8000978 <_svfiprintf_r+0x28>
 8000b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000b20:	b01d      	add	sp, #116	; 0x74
 8000b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b26:	ab03      	add	r3, sp, #12
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	462a      	mov	r2, r5
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <_svfiprintf_r+0x1f4>)
 8000b2e:	a904      	add	r1, sp, #16
 8000b30:	4638      	mov	r0, r7
 8000b32:	f000 f879 	bl	8000c28 <_printf_i>
 8000b36:	e7eb      	b.n	8000b10 <_svfiprintf_r+0x1c0>
 8000b38:	08000f74 	.word	0x08000f74
 8000b3c:	08000f7e 	.word	0x08000f7e
 8000b40:	00000000 	.word	0x00000000
 8000b44:	0800089d 	.word	0x0800089d
 8000b48:	08000f7a 	.word	0x08000f7a

08000b4c <_printf_common>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	4616      	mov	r6, r2
 8000b52:	4699      	mov	r9, r3
 8000b54:	688a      	ldr	r2, [r1, #8]
 8000b56:	690b      	ldr	r3, [r1, #16]
 8000b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	bfb8      	it	lt
 8000b60:	4613      	movlt	r3, r2
 8000b62:	6033      	str	r3, [r6, #0]
 8000b64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000b68:	4607      	mov	r7, r0
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	b10a      	cbz	r2, 8000b72 <_printf_common+0x26>
 8000b6e:	3301      	adds	r3, #1
 8000b70:	6033      	str	r3, [r6, #0]
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	0699      	lsls	r1, r3, #26
 8000b76:	bf42      	ittt	mi
 8000b78:	6833      	ldrmi	r3, [r6, #0]
 8000b7a:	3302      	addmi	r3, #2
 8000b7c:	6033      	strmi	r3, [r6, #0]
 8000b7e:	6825      	ldr	r5, [r4, #0]
 8000b80:	f015 0506 	ands.w	r5, r5, #6
 8000b84:	d106      	bne.n	8000b94 <_printf_common+0x48>
 8000b86:	f104 0a19 	add.w	sl, r4, #25
 8000b8a:	68e3      	ldr	r3, [r4, #12]
 8000b8c:	6832      	ldr	r2, [r6, #0]
 8000b8e:	1a9b      	subs	r3, r3, r2
 8000b90:	42ab      	cmp	r3, r5
 8000b92:	dc26      	bgt.n	8000be2 <_printf_common+0x96>
 8000b94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000b98:	1e13      	subs	r3, r2, #0
 8000b9a:	6822      	ldr	r2, [r4, #0]
 8000b9c:	bf18      	it	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	0692      	lsls	r2, r2, #26
 8000ba2:	d42b      	bmi.n	8000bfc <_printf_common+0xb0>
 8000ba4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ba8:	4649      	mov	r1, r9
 8000baa:	4638      	mov	r0, r7
 8000bac:	47c0      	blx	r8
 8000bae:	3001      	adds	r0, #1
 8000bb0:	d01e      	beq.n	8000bf0 <_printf_common+0xa4>
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	6922      	ldr	r2, [r4, #16]
 8000bb6:	f003 0306 	and.w	r3, r3, #6
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	bf02      	ittt	eq
 8000bbe:	68e5      	ldreq	r5, [r4, #12]
 8000bc0:	6833      	ldreq	r3, [r6, #0]
 8000bc2:	1aed      	subeq	r5, r5, r3
 8000bc4:	68a3      	ldr	r3, [r4, #8]
 8000bc6:	bf0c      	ite	eq
 8000bc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bcc:	2500      	movne	r5, #0
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	bfc4      	itt	gt
 8000bd2:	1a9b      	subgt	r3, r3, r2
 8000bd4:	18ed      	addgt	r5, r5, r3
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	341a      	adds	r4, #26
 8000bda:	42b5      	cmp	r5, r6
 8000bdc:	d11a      	bne.n	8000c14 <_printf_common+0xc8>
 8000bde:	2000      	movs	r0, #0
 8000be0:	e008      	b.n	8000bf4 <_printf_common+0xa8>
 8000be2:	2301      	movs	r3, #1
 8000be4:	4652      	mov	r2, sl
 8000be6:	4649      	mov	r1, r9
 8000be8:	4638      	mov	r0, r7
 8000bea:	47c0      	blx	r8
 8000bec:	3001      	adds	r0, #1
 8000bee:	d103      	bne.n	8000bf8 <_printf_common+0xac>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf8:	3501      	adds	r5, #1
 8000bfa:	e7c6      	b.n	8000b8a <_printf_common+0x3e>
 8000bfc:	18e1      	adds	r1, r4, r3
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	2030      	movs	r0, #48	; 0x30
 8000c02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000c06:	4422      	add	r2, r4
 8000c08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000c0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000c10:	3302      	adds	r3, #2
 8000c12:	e7c7      	b.n	8000ba4 <_printf_common+0x58>
 8000c14:	2301      	movs	r3, #1
 8000c16:	4622      	mov	r2, r4
 8000c18:	4649      	mov	r1, r9
 8000c1a:	4638      	mov	r0, r7
 8000c1c:	47c0      	blx	r8
 8000c1e:	3001      	adds	r0, #1
 8000c20:	d0e6      	beq.n	8000bf0 <_printf_common+0xa4>
 8000c22:	3601      	adds	r6, #1
 8000c24:	e7d9      	b.n	8000bda <_printf_common+0x8e>
	...

08000c28 <_printf_i>:
 8000c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	7e0f      	ldrb	r7, [r1, #24]
 8000c2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000c30:	2f78      	cmp	r7, #120	; 0x78
 8000c32:	4691      	mov	r9, r2
 8000c34:	4680      	mov	r8, r0
 8000c36:	460c      	mov	r4, r1
 8000c38:	469a      	mov	sl, r3
 8000c3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000c3e:	d807      	bhi.n	8000c50 <_printf_i+0x28>
 8000c40:	2f62      	cmp	r7, #98	; 0x62
 8000c42:	d80a      	bhi.n	8000c5a <_printf_i+0x32>
 8000c44:	2f00      	cmp	r7, #0
 8000c46:	f000 80d4 	beq.w	8000df2 <_printf_i+0x1ca>
 8000c4a:	2f58      	cmp	r7, #88	; 0x58
 8000c4c:	f000 80c0 	beq.w	8000dd0 <_printf_i+0x1a8>
 8000c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000c54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000c58:	e03a      	b.n	8000cd0 <_printf_i+0xa8>
 8000c5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000c5e:	2b15      	cmp	r3, #21
 8000c60:	d8f6      	bhi.n	8000c50 <_printf_i+0x28>
 8000c62:	a101      	add	r1, pc, #4	; (adr r1, 8000c68 <_printf_i+0x40>)
 8000c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c68:	08000cc1 	.word	0x08000cc1
 8000c6c:	08000cd5 	.word	0x08000cd5
 8000c70:	08000c51 	.word	0x08000c51
 8000c74:	08000c51 	.word	0x08000c51
 8000c78:	08000c51 	.word	0x08000c51
 8000c7c:	08000c51 	.word	0x08000c51
 8000c80:	08000cd5 	.word	0x08000cd5
 8000c84:	08000c51 	.word	0x08000c51
 8000c88:	08000c51 	.word	0x08000c51
 8000c8c:	08000c51 	.word	0x08000c51
 8000c90:	08000c51 	.word	0x08000c51
 8000c94:	08000dd9 	.word	0x08000dd9
 8000c98:	08000d01 	.word	0x08000d01
 8000c9c:	08000d93 	.word	0x08000d93
 8000ca0:	08000c51 	.word	0x08000c51
 8000ca4:	08000c51 	.word	0x08000c51
 8000ca8:	08000dfb 	.word	0x08000dfb
 8000cac:	08000c51 	.word	0x08000c51
 8000cb0:	08000d01 	.word	0x08000d01
 8000cb4:	08000c51 	.word	0x08000c51
 8000cb8:	08000c51 	.word	0x08000c51
 8000cbc:	08000d9b 	.word	0x08000d9b
 8000cc0:	682b      	ldr	r3, [r5, #0]
 8000cc2:	1d1a      	adds	r2, r3, #4
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	602a      	str	r2, [r5, #0]
 8000cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ccc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e09f      	b.n	8000e14 <_printf_i+0x1ec>
 8000cd4:	6820      	ldr	r0, [r4, #0]
 8000cd6:	682b      	ldr	r3, [r5, #0]
 8000cd8:	0607      	lsls	r7, r0, #24
 8000cda:	f103 0104 	add.w	r1, r3, #4
 8000cde:	6029      	str	r1, [r5, #0]
 8000ce0:	d501      	bpl.n	8000ce6 <_printf_i+0xbe>
 8000ce2:	681e      	ldr	r6, [r3, #0]
 8000ce4:	e003      	b.n	8000cee <_printf_i+0xc6>
 8000ce6:	0646      	lsls	r6, r0, #25
 8000ce8:	d5fb      	bpl.n	8000ce2 <_printf_i+0xba>
 8000cea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	da03      	bge.n	8000cfa <_printf_i+0xd2>
 8000cf2:	232d      	movs	r3, #45	; 0x2d
 8000cf4:	4276      	negs	r6, r6
 8000cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000cfa:	485a      	ldr	r0, [pc, #360]	; (8000e64 <_printf_i+0x23c>)
 8000cfc:	230a      	movs	r3, #10
 8000cfe:	e012      	b.n	8000d26 <_printf_i+0xfe>
 8000d00:	682b      	ldr	r3, [r5, #0]
 8000d02:	6820      	ldr	r0, [r4, #0]
 8000d04:	1d19      	adds	r1, r3, #4
 8000d06:	6029      	str	r1, [r5, #0]
 8000d08:	0605      	lsls	r5, r0, #24
 8000d0a:	d501      	bpl.n	8000d10 <_printf_i+0xe8>
 8000d0c:	681e      	ldr	r6, [r3, #0]
 8000d0e:	e002      	b.n	8000d16 <_printf_i+0xee>
 8000d10:	0641      	lsls	r1, r0, #25
 8000d12:	d5fb      	bpl.n	8000d0c <_printf_i+0xe4>
 8000d14:	881e      	ldrh	r6, [r3, #0]
 8000d16:	4853      	ldr	r0, [pc, #332]	; (8000e64 <_printf_i+0x23c>)
 8000d18:	2f6f      	cmp	r7, #111	; 0x6f
 8000d1a:	bf0c      	ite	eq
 8000d1c:	2308      	moveq	r3, #8
 8000d1e:	230a      	movne	r3, #10
 8000d20:	2100      	movs	r1, #0
 8000d22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000d26:	6865      	ldr	r5, [r4, #4]
 8000d28:	60a5      	str	r5, [r4, #8]
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	bfa2      	ittt	ge
 8000d2e:	6821      	ldrge	r1, [r4, #0]
 8000d30:	f021 0104 	bicge.w	r1, r1, #4
 8000d34:	6021      	strge	r1, [r4, #0]
 8000d36:	b90e      	cbnz	r6, 8000d3c <_printf_i+0x114>
 8000d38:	2d00      	cmp	r5, #0
 8000d3a:	d04b      	beq.n	8000dd4 <_printf_i+0x1ac>
 8000d3c:	4615      	mov	r5, r2
 8000d3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8000d42:	fb03 6711 	mls	r7, r3, r1, r6
 8000d46:	5dc7      	ldrb	r7, [r0, r7]
 8000d48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000d4c:	4637      	mov	r7, r6
 8000d4e:	42bb      	cmp	r3, r7
 8000d50:	460e      	mov	r6, r1
 8000d52:	d9f4      	bls.n	8000d3e <_printf_i+0x116>
 8000d54:	2b08      	cmp	r3, #8
 8000d56:	d10b      	bne.n	8000d70 <_printf_i+0x148>
 8000d58:	6823      	ldr	r3, [r4, #0]
 8000d5a:	07de      	lsls	r6, r3, #31
 8000d5c:	d508      	bpl.n	8000d70 <_printf_i+0x148>
 8000d5e:	6923      	ldr	r3, [r4, #16]
 8000d60:	6861      	ldr	r1, [r4, #4]
 8000d62:	4299      	cmp	r1, r3
 8000d64:	bfde      	ittt	le
 8000d66:	2330      	movle	r3, #48	; 0x30
 8000d68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000d6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000d70:	1b52      	subs	r2, r2, r5
 8000d72:	6122      	str	r2, [r4, #16]
 8000d74:	f8cd a000 	str.w	sl, [sp]
 8000d78:	464b      	mov	r3, r9
 8000d7a:	aa03      	add	r2, sp, #12
 8000d7c:	4621      	mov	r1, r4
 8000d7e:	4640      	mov	r0, r8
 8000d80:	f7ff fee4 	bl	8000b4c <_printf_common>
 8000d84:	3001      	adds	r0, #1
 8000d86:	d14a      	bne.n	8000e1e <_printf_i+0x1f6>
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	b004      	add	sp, #16
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	f043 0320 	orr.w	r3, r3, #32
 8000d98:	6023      	str	r3, [r4, #0]
 8000d9a:	4833      	ldr	r0, [pc, #204]	; (8000e68 <_printf_i+0x240>)
 8000d9c:	2778      	movs	r7, #120	; 0x78
 8000d9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000da2:	6823      	ldr	r3, [r4, #0]
 8000da4:	6829      	ldr	r1, [r5, #0]
 8000da6:	061f      	lsls	r7, r3, #24
 8000da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8000dac:	d402      	bmi.n	8000db4 <_printf_i+0x18c>
 8000dae:	065f      	lsls	r7, r3, #25
 8000db0:	bf48      	it	mi
 8000db2:	b2b6      	uxthmi	r6, r6
 8000db4:	07df      	lsls	r7, r3, #31
 8000db6:	bf48      	it	mi
 8000db8:	f043 0320 	orrmi.w	r3, r3, #32
 8000dbc:	6029      	str	r1, [r5, #0]
 8000dbe:	bf48      	it	mi
 8000dc0:	6023      	strmi	r3, [r4, #0]
 8000dc2:	b91e      	cbnz	r6, 8000dcc <_printf_i+0x1a4>
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	f023 0320 	bic.w	r3, r3, #32
 8000dca:	6023      	str	r3, [r4, #0]
 8000dcc:	2310      	movs	r3, #16
 8000dce:	e7a7      	b.n	8000d20 <_printf_i+0xf8>
 8000dd0:	4824      	ldr	r0, [pc, #144]	; (8000e64 <_printf_i+0x23c>)
 8000dd2:	e7e4      	b.n	8000d9e <_printf_i+0x176>
 8000dd4:	4615      	mov	r5, r2
 8000dd6:	e7bd      	b.n	8000d54 <_printf_i+0x12c>
 8000dd8:	682b      	ldr	r3, [r5, #0]
 8000dda:	6826      	ldr	r6, [r4, #0]
 8000ddc:	6961      	ldr	r1, [r4, #20]
 8000dde:	1d18      	adds	r0, r3, #4
 8000de0:	6028      	str	r0, [r5, #0]
 8000de2:	0635      	lsls	r5, r6, #24
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	d501      	bpl.n	8000dec <_printf_i+0x1c4>
 8000de8:	6019      	str	r1, [r3, #0]
 8000dea:	e002      	b.n	8000df2 <_printf_i+0x1ca>
 8000dec:	0670      	lsls	r0, r6, #25
 8000dee:	d5fb      	bpl.n	8000de8 <_printf_i+0x1c0>
 8000df0:	8019      	strh	r1, [r3, #0]
 8000df2:	2300      	movs	r3, #0
 8000df4:	6123      	str	r3, [r4, #16]
 8000df6:	4615      	mov	r5, r2
 8000df8:	e7bc      	b.n	8000d74 <_printf_i+0x14c>
 8000dfa:	682b      	ldr	r3, [r5, #0]
 8000dfc:	1d1a      	adds	r2, r3, #4
 8000dfe:	602a      	str	r2, [r5, #0]
 8000e00:	681d      	ldr	r5, [r3, #0]
 8000e02:	6862      	ldr	r2, [r4, #4]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4628      	mov	r0, r5
 8000e08:	f7ff f9ea 	bl	80001e0 <memchr>
 8000e0c:	b108      	cbz	r0, 8000e12 <_printf_i+0x1ea>
 8000e0e:	1b40      	subs	r0, r0, r5
 8000e10:	6060      	str	r0, [r4, #4]
 8000e12:	6863      	ldr	r3, [r4, #4]
 8000e14:	6123      	str	r3, [r4, #16]
 8000e16:	2300      	movs	r3, #0
 8000e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e1c:	e7aa      	b.n	8000d74 <_printf_i+0x14c>
 8000e1e:	6923      	ldr	r3, [r4, #16]
 8000e20:	462a      	mov	r2, r5
 8000e22:	4649      	mov	r1, r9
 8000e24:	4640      	mov	r0, r8
 8000e26:	47d0      	blx	sl
 8000e28:	3001      	adds	r0, #1
 8000e2a:	d0ad      	beq.n	8000d88 <_printf_i+0x160>
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	079b      	lsls	r3, r3, #30
 8000e30:	d413      	bmi.n	8000e5a <_printf_i+0x232>
 8000e32:	68e0      	ldr	r0, [r4, #12]
 8000e34:	9b03      	ldr	r3, [sp, #12]
 8000e36:	4298      	cmp	r0, r3
 8000e38:	bfb8      	it	lt
 8000e3a:	4618      	movlt	r0, r3
 8000e3c:	e7a6      	b.n	8000d8c <_printf_i+0x164>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	4632      	mov	r2, r6
 8000e42:	4649      	mov	r1, r9
 8000e44:	4640      	mov	r0, r8
 8000e46:	47d0      	blx	sl
 8000e48:	3001      	adds	r0, #1
 8000e4a:	d09d      	beq.n	8000d88 <_printf_i+0x160>
 8000e4c:	3501      	adds	r5, #1
 8000e4e:	68e3      	ldr	r3, [r4, #12]
 8000e50:	9903      	ldr	r1, [sp, #12]
 8000e52:	1a5b      	subs	r3, r3, r1
 8000e54:	42ab      	cmp	r3, r5
 8000e56:	dcf2      	bgt.n	8000e3e <_printf_i+0x216>
 8000e58:	e7eb      	b.n	8000e32 <_printf_i+0x20a>
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	f104 0619 	add.w	r6, r4, #25
 8000e60:	e7f5      	b.n	8000e4e <_printf_i+0x226>
 8000e62:	bf00      	nop
 8000e64:	08000f85 	.word	0x08000f85
 8000e68:	08000f96 	.word	0x08000f96

08000e6c <memmove>:
 8000e6c:	4288      	cmp	r0, r1
 8000e6e:	b510      	push	{r4, lr}
 8000e70:	eb01 0402 	add.w	r4, r1, r2
 8000e74:	d902      	bls.n	8000e7c <memmove+0x10>
 8000e76:	4284      	cmp	r4, r0
 8000e78:	4623      	mov	r3, r4
 8000e7a:	d807      	bhi.n	8000e8c <memmove+0x20>
 8000e7c:	1e43      	subs	r3, r0, #1
 8000e7e:	42a1      	cmp	r1, r4
 8000e80:	d008      	beq.n	8000e94 <memmove+0x28>
 8000e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e86:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000e8a:	e7f8      	b.n	8000e7e <memmove+0x12>
 8000e8c:	4402      	add	r2, r0
 8000e8e:	4601      	mov	r1, r0
 8000e90:	428a      	cmp	r2, r1
 8000e92:	d100      	bne.n	8000e96 <memmove+0x2a>
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000e9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000e9e:	e7f7      	b.n	8000e90 <memmove+0x24>

08000ea0 <_sbrk_r>:
 8000ea0:	b538      	push	{r3, r4, r5, lr}
 8000ea2:	4d06      	ldr	r5, [pc, #24]	; (8000ebc <_sbrk_r+0x1c>)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	602b      	str	r3, [r5, #0]
 8000eac:	f7ff fb2c 	bl	8000508 <_sbrk>
 8000eb0:	1c43      	adds	r3, r0, #1
 8000eb2:	d102      	bne.n	8000eba <_sbrk_r+0x1a>
 8000eb4:	682b      	ldr	r3, [r5, #0]
 8000eb6:	b103      	cbz	r3, 8000eba <_sbrk_r+0x1a>
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	bd38      	pop	{r3, r4, r5, pc}
 8000ebc:	200001b0 	.word	0x200001b0

08000ec0 <memcpy>:
 8000ec0:	440a      	add	r2, r1
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d100      	bne.n	8000ecc <memcpy+0xc>
 8000eca:	4770      	bx	lr
 8000ecc:	b510      	push	{r4, lr}
 8000ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000ed2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000ed6:	4291      	cmp	r1, r2
 8000ed8:	d1f9      	bne.n	8000ece <memcpy+0xe>
 8000eda:	bd10      	pop	{r4, pc}

08000edc <_realloc_r>:
 8000edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee0:	4680      	mov	r8, r0
 8000ee2:	4614      	mov	r4, r2
 8000ee4:	460e      	mov	r6, r1
 8000ee6:	b921      	cbnz	r1, 8000ef2 <_realloc_r+0x16>
 8000ee8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000eec:	4611      	mov	r1, r2
 8000eee:	f7ff bc49 	b.w	8000784 <_malloc_r>
 8000ef2:	b92a      	cbnz	r2, 8000f00 <_realloc_r+0x24>
 8000ef4:	f7ff fbda 	bl	80006ac <_free_r>
 8000ef8:	4625      	mov	r5, r4
 8000efa:	4628      	mov	r0, r5
 8000efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f00:	f000 f81b 	bl	8000f3a <_malloc_usable_size_r>
 8000f04:	4284      	cmp	r4, r0
 8000f06:	4607      	mov	r7, r0
 8000f08:	d802      	bhi.n	8000f10 <_realloc_r+0x34>
 8000f0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000f0e:	d812      	bhi.n	8000f36 <_realloc_r+0x5a>
 8000f10:	4621      	mov	r1, r4
 8000f12:	4640      	mov	r0, r8
 8000f14:	f7ff fc36 	bl	8000784 <_malloc_r>
 8000f18:	4605      	mov	r5, r0
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d0ed      	beq.n	8000efa <_realloc_r+0x1e>
 8000f1e:	42bc      	cmp	r4, r7
 8000f20:	4622      	mov	r2, r4
 8000f22:	4631      	mov	r1, r6
 8000f24:	bf28      	it	cs
 8000f26:	463a      	movcs	r2, r7
 8000f28:	f7ff ffca 	bl	8000ec0 <memcpy>
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	4640      	mov	r0, r8
 8000f30:	f7ff fbbc 	bl	80006ac <_free_r>
 8000f34:	e7e1      	b.n	8000efa <_realloc_r+0x1e>
 8000f36:	4635      	mov	r5, r6
 8000f38:	e7df      	b.n	8000efa <_realloc_r+0x1e>

08000f3a <_malloc_usable_size_r>:
 8000f3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f3e:	1f18      	subs	r0, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	bfbc      	itt	lt
 8000f44:	580b      	ldrlt	r3, [r1, r0]
 8000f46:	18c0      	addlt	r0, r0, r3
 8000f48:	4770      	bx	lr
	...

08000f4c <_init>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr

08000f58 <_fini>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr
