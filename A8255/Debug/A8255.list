
A8255.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000588  08000588  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000588  08000588  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000588  08000588  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000588  08000588  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000588  08000588  00010588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800058c  0800058c  0001058c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000590  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000594  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000594  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000144b  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000561  00000000  00000000  000214c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f8  00000000  00000000  00021a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000163  00000000  00000000  00021c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013dbf  00000000  00000000  00021d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000222a  00000000  00000000  00035b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fa51  00000000  00000000  00037d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000624  00000000  00000000  000b77c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000b7de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000570 	.word	0x08000570

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000570 	.word	0x08000570

080001d4 <main>:
void init_8255(void);
void write_8255_control(uint8_t value);
uint8_t read_portA(void);

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    // Bật clock cho GPIOA, GPIOB, GPIOC
    RCC->AHB1ENR |= (1 << 0) | (1 << 1) | (1 << 2); // GPIOA, GPIOB, GPIOC
 80001da:	4b11      	ldr	r3, [pc, #68]	; (8000220 <main+0x4c>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a10      	ldr	r2, [pc, #64]	; (8000220 <main+0x4c>)
 80001e0:	f043 0307 	orr.w	r3, r3, #7
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30

    // Khởi tạo GPIO
    GPIO_Init();
 80001e6:	f000 f81f 	bl	8000228 <GPIO_Init>

    // Khởi tạo TIM2
    TIM2_Init();
 80001ea:	f000 f863 	bl	80002b4 <TIM2_Init>

    // Cấu hình 8255A ở chế độ 1, cổng A làm đầu vào
    init_8255();
 80001ee:	f000 f8db 	bl	80003a8 <init_8255>
    timer_delay_ms(3000); // Chậm 3s sau khi khởi tạo 8255A
 80001f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001f6:	f000 f88f 	bl	8000318 <timer_delay_ms>

    while (1)
    {
        // Kiểm tra IBF (PC1)
        if (GPIOC->IDR & IBF_PIN) // IBF = 1: Buffer đầy
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <main+0x50>)
 80001fc:	691b      	ldr	r3, [r3, #16]
 80001fe:	f003 0302 	and.w	r3, r3, #2
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <main+0x26>
        {
            timer_delay_ms(3000); // Chậm 3s trước khi đọc
 8000206:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800020a:	f000 f885 	bl	8000318 <timer_delay_ms>

            // Đọc dữ liệu từ cổng A
            uint8_t data = read_portA();
 800020e:	f000 f8d9 	bl	80003c4 <read_portA>
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
            timer_delay_ms(3000); // Chậm 3s sau khi đọc
 8000216:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800021a:	f000 f87d 	bl	8000318 <timer_delay_ms>
        if (GPIOC->IDR & IBF_PIN) // IBF = 1: Buffer đầy
 800021e:	e7ec      	b.n	80001fa <main+0x26>
 8000220:	40023800 	.word	0x40023800
 8000224:	40020800 	.word	0x40020800

08000228 <GPIO_Init>:
    }
}

// Khởi tạo GPIO
void GPIO_Init(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
    // PA0-PA7: Output (D0-D7, dùng để giao tiếp với 8255A)
    GPIOA->MODER &= ~(0xFFFF); // Xóa bit 0-15
 800022c:	4b1e      	ldr	r3, [pc, #120]	; (80002a8 <GPIO_Init+0x80>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a1d      	ldr	r2, [pc, #116]	; (80002a8 <GPIO_Init+0x80>)
 8000232:	0c1b      	lsrs	r3, r3, #16
 8000234:	041b      	lsls	r3, r3, #16
 8000236:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x5555);  // Output (01) cho PA0-PA7
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <GPIO_Init+0x80>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a1a      	ldr	r2, [pc, #104]	; (80002a8 <GPIO_Init+0x80>)
 800023e:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8000242:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000246:	6013      	str	r3, [r2, #0]
    GPIOA->OSPEEDR &= ~(0xFFFF); // Tốc độ thấp
 8000248:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <GPIO_Init+0x80>)
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	4a16      	ldr	r2, [pc, #88]	; (80002a8 <GPIO_Init+0x80>)
 800024e:	0c1b      	lsrs	r3, r3, #16
 8000250:	041b      	lsls	r3, r3, #16
 8000252:	6093      	str	r3, [r2, #8]
    GPIOA->ODR &= ~(0xFF);       // Ban đầu đặt thấp
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <GPIO_Init+0x80>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4a13      	ldr	r2, [pc, #76]	; (80002a8 <GPIO_Init+0x80>)
 800025a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800025e:	6153      	str	r3, [r2, #20]

    // PB0 (A0), PB1 (A1), PB2 (RD), PB3 (WR): Output
    GPIOB->MODER &= ~(0xFF); // Xóa bit 0-7
 8000260:	4b12      	ldr	r3, [pc, #72]	; (80002ac <GPIO_Init+0x84>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a11      	ldr	r2, [pc, #68]	; (80002ac <GPIO_Init+0x84>)
 8000266:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800026a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (0x55);  // Output (01) cho PB0-PB3
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <GPIO_Init+0x84>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <GPIO_Init+0x84>)
 8000272:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000276:	6013      	str	r3, [r2, #0]
    GPIOB->OSPEEDR &= ~(0xFF); // Tốc độ thấp
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <GPIO_Init+0x84>)
 800027a:	689b      	ldr	r3, [r3, #8]
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <GPIO_Init+0x84>)
 800027e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000282:	6093      	str	r3, [r2, #8]
    GPIOB->ODR &= ~( (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) ); // Ban đầu đặt thấp
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <GPIO_Init+0x84>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a08      	ldr	r2, [pc, #32]	; (80002ac <GPIO_Init+0x84>)
 800028a:	f023 030f 	bic.w	r3, r3, #15
 800028e:	6153      	str	r3, [r2, #20]

    // PC0 (INTR), PC1 (IBF): Input
    GPIOC->MODER &= ~( (3 << 0) | (3 << 2) ); // Input (00) cho PC0, PC1
 8000290:	4b07      	ldr	r3, [pc, #28]	; (80002b0 <GPIO_Init+0x88>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a06      	ldr	r2, [pc, #24]	; (80002b0 <GPIO_Init+0x88>)
 8000296:	f023 030f 	bic.w	r3, r3, #15
 800029a:	6013      	str	r3, [r2, #0]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40020000 	.word	0x40020000
 80002ac:	40020400 	.word	0x40020400
 80002b0:	40020800 	.word	0x40020800

080002b4 <TIM2_Init>:

// Khởi tạo TIM2
void TIM2_Init(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
    // Bật clock cho TIM2
    RCC->APB1ENR |= (1 << 0); // TIM2EN
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <TIM2_Init+0x34>)
 80002ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002bc:	4a0a      	ldr	r2, [pc, #40]	; (80002e8 <TIM2_Init+0x34>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6413      	str	r3, [r2, #64]	; 0x40

    // Cấu hình TIM2: 16MHz, đếm 1us
    TIM2->PSC = 16 - 1; // Prescaler = 16 → 16MHz / 16 = 1MHz (1us/tick)
 80002c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c8:	220f      	movs	r2, #15
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 0xFFFF; // Auto-reload tối đa
 80002cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002d4:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CR1 = (1 << 0); // CEN: Bật Timer
 80002d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002da:	2201      	movs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	40023800 	.word	0x40023800

080002ec <timer_delay_us>:

// Độ trễ micro giây
void timer_delay_us(uint32_t us)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
    TIM2->CNT = 0; // Reset bộ đếm
 80002f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f8:	2200      	movs	r2, #0
 80002fa:	625a      	str	r2, [r3, #36]	; 0x24
    while (TIM2->CNT < us); // Chờ đến khi đếm đủ micro giây
 80002fc:	bf00      	nop
 80002fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	429a      	cmp	r2, r3
 8000308:	d8f9      	bhi.n	80002fe <timer_delay_us+0x12>
}
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr

08000318 <timer_delay_ms>:

// Độ trễ mili giây
void timer_delay_ms(uint32_t ms)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b084      	sub	sp, #16
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms; i++)
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	e006      	b.n	8000334 <timer_delay_ms+0x1c>
    {
        timer_delay_us(1000); // 1000us = 1ms
 8000326:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800032a:	f7ff ffdf 	bl	80002ec <timer_delay_us>
    for (uint32_t i = 0; i < ms; i++)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3301      	adds	r3, #1
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	68fa      	ldr	r2, [r7, #12]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	d3f4      	bcc.n	8000326 <timer_delay_ms+0xe>
    }
}
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	3710      	adds	r7, #16
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <write_8255_control>:

// Ghi giá trị vào thanh ghi điều khiển
void write_8255_control(uint8_t value)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
    // Chọn thanh ghi điều khiển: A1 = 1, A0 = 0
    GPIOB->ODR |= (1 << 1);  // PB1 = 1 (A1)
 8000352:	4b13      	ldr	r3, [pc, #76]	; (80003a0 <write_8255_control+0x58>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a12      	ldr	r2, [pc, #72]	; (80003a0 <write_8255_control+0x58>)
 8000358:	f043 0302 	orr.w	r3, r3, #2
 800035c:	6153      	str	r3, [r2, #20]
    GPIOB->ODR &= ~(1 << 0); // PB0 = 0 (A0)
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <write_8255_control+0x58>)
 8000360:	695b      	ldr	r3, [r3, #20]
 8000362:	4a0f      	ldr	r2, [pc, #60]	; (80003a0 <write_8255_control+0x58>)
 8000364:	f023 0301 	bic.w	r3, r3, #1
 8000368:	6153      	str	r3, [r2, #20]

    // Đặt dữ liệu lên bus D0-D7 (PA0-PA7)
    GPIOA->ODR = (GPIOA->ODR & 0xFF00) | (value & 0xFF);
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <write_8255_control+0x5c>)
 800036c:	695b      	ldr	r3, [r3, #20]
 800036e:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	490b      	ldr	r1, [pc, #44]	; (80003a4 <write_8255_control+0x5c>)
 8000376:	4313      	orrs	r3, r2
 8000378:	614b      	str	r3, [r1, #20]

    // Kích hoạt WR (active low)
    GPIOB->ODR &= ~(1 << 3); // PB3 = 0 (WR)
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <write_8255_control+0x58>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	4a08      	ldr	r2, [pc, #32]	; (80003a0 <write_8255_control+0x58>)
 8000380:	f023 0308 	bic.w	r3, r3, #8
 8000384:	6153      	str	r3, [r2, #20]
    timer_delay_us(10);      // Độ trễ 10us cho timing
 8000386:	200a      	movs	r0, #10
 8000388:	f7ff ffb0 	bl	80002ec <timer_delay_us>
    GPIOB->ODR |= (1 << 3);  // PB3 = 1 (WR)
 800038c:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <write_8255_control+0x58>)
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	4a03      	ldr	r2, [pc, #12]	; (80003a0 <write_8255_control+0x58>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6153      	str	r3, [r2, #20]
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40020400 	.word	0x40020400
 80003a4:	40020000 	.word	0x40020000

080003a8 <init_8255>:

// Khởi tạo 8255A
void init_8255(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
    uint8_t control_word = (1 << 7) | (1 << 5) | (1 << 4); // Mode 1, Port A Input
 80003ae:	23b0      	movs	r3, #176	; 0xb0
 80003b0:	71fb      	strb	r3, [r7, #7]
    write_8255_control(control_word);
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ffc7 	bl	8000348 <write_8255_control>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <read_portA>:

// Đọc dữ liệu từ cổng A
uint8_t read_portA(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
    uint8_t data;

    // Chuyển PA0-PA7 thành Input
    GPIOA->MODER &= ~(0xFFFF); // Input (00) cho PA0-PA7
 80003ca:	4b18      	ldr	r3, [pc, #96]	; (800042c <read_portA+0x68>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a17      	ldr	r2, [pc, #92]	; (800042c <read_portA+0x68>)
 80003d0:	0c1b      	lsrs	r3, r3, #16
 80003d2:	041b      	lsls	r3, r3, #16
 80003d4:	6013      	str	r3, [r2, #0]

    // Chọn cổng A: A1 = 0, A0 = 0
    GPIOB->ODR &= ~(1 << 1); // PB1 = 0 (A1)
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <read_portA+0x6c>)
 80003d8:	695b      	ldr	r3, [r3, #20]
 80003da:	4a15      	ldr	r2, [pc, #84]	; (8000430 <read_portA+0x6c>)
 80003dc:	f023 0302 	bic.w	r3, r3, #2
 80003e0:	6153      	str	r3, [r2, #20]
    GPIOB->ODR &= ~(1 << 0); // PB0 = 0 (A0)
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <read_portA+0x6c>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a12      	ldr	r2, [pc, #72]	; (8000430 <read_portA+0x6c>)
 80003e8:	f023 0301 	bic.w	r3, r3, #1
 80003ec:	6153      	str	r3, [r2, #20]

    // Kích hoạt RD (active low)
    GPIOB->ODR &= ~(1 << 2); // PB2 = 0 (RD)
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <read_portA+0x6c>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a0f      	ldr	r2, [pc, #60]	; (8000430 <read_portA+0x6c>)
 80003f4:	f023 0304 	bic.w	r3, r3, #4
 80003f8:	6153      	str	r3, [r2, #20]
    timer_delay_us(10);      // Độ trễ 10us cho timing
 80003fa:	200a      	movs	r0, #10
 80003fc:	f7ff ff76 	bl	80002ec <timer_delay_us>
    data = GPIOA->IDR & 0xFF; // Đọc dữ liệu từ PA0-PA7
 8000400:	4b0a      	ldr	r3, [pc, #40]	; (800042c <read_portA+0x68>)
 8000402:	691b      	ldr	r3, [r3, #16]
 8000404:	71fb      	strb	r3, [r7, #7]
    GPIOB->ODR |= (1 << 2);  // PB2 = 1 (RD)
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <read_portA+0x6c>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a09      	ldr	r2, [pc, #36]	; (8000430 <read_portA+0x6c>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	6153      	str	r3, [r2, #20]

    // Chuyển PA0-PA7 về Output
    GPIOA->MODER |= (0x5555); // Output (01) cho PA0-PA7
 8000412:	4b06      	ldr	r3, [pc, #24]	; (800042c <read_portA+0x68>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a05      	ldr	r2, [pc, #20]	; (800042c <read_portA+0x68>)
 8000418:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800041c:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000420:	6013      	str	r3, [r2, #0]

    return data;
 8000422:	79fb      	ldrb	r3, [r7, #7]
}
 8000424:	4618      	mov	r0, r3
 8000426:	3708      	adds	r7, #8
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40020000 	.word	0x40020000
 8000430:	40020400 	.word	0x40020400

08000434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <NMI_Handler+0x4>

0800043a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800043e:	e7fe      	b.n	800043e <HardFault_Handler+0x4>

08000440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000444:	e7fe      	b.n	8000444 <MemManage_Handler+0x4>

08000446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800044a:	e7fe      	b.n	800044a <BusFault_Handler+0x4>

0800044c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000450:	e7fe      	b.n	8000450 <UsageFault_Handler+0x4>

08000452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000480:	f000 f83e 	bl	8000500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <SystemInit+0x20>)
 800048e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000492:	4a05      	ldr	r2, [pc, #20]	; (80004a8 <SystemInit+0x20>)
 8000494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	e000ed00 	.word	0xe000ed00

080004ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004b0:	480d      	ldr	r0, [pc, #52]	; (80004e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004b2:	490e      	ldr	r1, [pc, #56]	; (80004ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004b4:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0b      	ldr	r2, [pc, #44]	; (80004f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004c8:	4c0b      	ldr	r4, [pc, #44]	; (80004f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004d6:	f7ff ffd7 	bl	8000488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004da:	f000 f825 	bl	8000528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004de:	f7ff fe79 	bl	80001d4 <main>
  bx  lr    
 80004e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004f0:	08000590 	.word	0x08000590
  ldr r2, =_sbss
 80004f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004f8:	20000024 	.word	0x20000024

080004fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004fc:	e7fe      	b.n	80004fc <ADC_IRQHandler>
	...

08000500 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <HAL_IncTick+0x20>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	461a      	mov	r2, r3
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <HAL_IncTick+0x24>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4413      	add	r3, r2
 8000510:	4a04      	ldr	r2, [pc, #16]	; (8000524 <HAL_IncTick+0x24>)
 8000512:	6013      	str	r3, [r2, #0]
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000000 	.word	0x20000000
 8000524:	20000020 	.word	0x20000020

08000528 <__libc_init_array>:
 8000528:	b570      	push	{r4, r5, r6, lr}
 800052a:	4d0d      	ldr	r5, [pc, #52]	; (8000560 <__libc_init_array+0x38>)
 800052c:	4c0d      	ldr	r4, [pc, #52]	; (8000564 <__libc_init_array+0x3c>)
 800052e:	1b64      	subs	r4, r4, r5
 8000530:	10a4      	asrs	r4, r4, #2
 8000532:	2600      	movs	r6, #0
 8000534:	42a6      	cmp	r6, r4
 8000536:	d109      	bne.n	800054c <__libc_init_array+0x24>
 8000538:	4d0b      	ldr	r5, [pc, #44]	; (8000568 <__libc_init_array+0x40>)
 800053a:	4c0c      	ldr	r4, [pc, #48]	; (800056c <__libc_init_array+0x44>)
 800053c:	f000 f818 	bl	8000570 <_init>
 8000540:	1b64      	subs	r4, r4, r5
 8000542:	10a4      	asrs	r4, r4, #2
 8000544:	2600      	movs	r6, #0
 8000546:	42a6      	cmp	r6, r4
 8000548:	d105      	bne.n	8000556 <__libc_init_array+0x2e>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000550:	4798      	blx	r3
 8000552:	3601      	adds	r6, #1
 8000554:	e7ee      	b.n	8000534 <__libc_init_array+0xc>
 8000556:	f855 3b04 	ldr.w	r3, [r5], #4
 800055a:	4798      	blx	r3
 800055c:	3601      	adds	r6, #1
 800055e:	e7f2      	b.n	8000546 <__libc_init_array+0x1e>
 8000560:	08000588 	.word	0x08000588
 8000564:	08000588 	.word	0x08000588
 8000568:	08000588 	.word	0x08000588
 800056c:	0800058c 	.word	0x0800058c

08000570 <_init>:
 8000570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000572:	bf00      	nop
 8000574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000576:	bc08      	pop	{r3}
 8000578:	469e      	mov	lr, r3
 800057a:	4770      	bx	lr

0800057c <_fini>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr
