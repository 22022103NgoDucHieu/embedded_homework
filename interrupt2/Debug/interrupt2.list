
interrupt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000764  08000764  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000764  08000764  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000764  08000764  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000764  08000764  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000764  08000764  00010764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000768  08000768  00010768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800076c  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000004  08000770  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000770  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001a95  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000060a  00000000  00000000  00021b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00022118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000171  00000000  00000000  00022320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013db3  00000000  00000000  00022491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000022fa  00000000  00000000  00036244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fad8  00000000  00000000  0003853e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000658  00000000  00000000  000b8018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b8670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800074c 	.word	0x0800074c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800074c 	.word	0x0800074c

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db12      	blt.n	8000248 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	490a      	ldr	r1, [pc, #40]	; (8000254 <__NVIC_DisableIRQ+0x44>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	3320      	adds	r3, #32
 8000238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800023c:	f3bf 8f4f 	dsb	sy
}
 8000240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000242:	f3bf 8f6f 	isb	sy
}
 8000246:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100

08000258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	6039      	str	r1, [r7, #0]
 8000262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000268:	2b00      	cmp	r3, #0
 800026a:	db0a      	blt.n	8000282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	b2da      	uxtb	r2, r3
 8000270:	490c      	ldr	r1, [pc, #48]	; (80002a4 <__NVIC_SetPriority+0x4c>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	0112      	lsls	r2, r2, #4
 8000278:	b2d2      	uxtb	r2, r2
 800027a:	440b      	add	r3, r1
 800027c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000280:	e00a      	b.n	8000298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	b2da      	uxtb	r2, r3
 8000286:	4908      	ldr	r1, [pc, #32]	; (80002a8 <__NVIC_SetPriority+0x50>)
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	f003 030f 	and.w	r3, r3, #15
 800028e:	3b04      	subs	r3, #4
 8000290:	0112      	lsls	r2, r2, #4
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	440b      	add	r3, r1
 8000296:	761a      	strb	r2, [r3, #24]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <init_GPIO>:
volatile uint8_t exti0_flag = 0;       // Biến cờ cho ngắt từ PC0 (LED xanh)
volatile uint8_t exti1_flag = 0;       // Biến cờ cho ngắt từ PA0 (LED vàng)
volatile uint32_t led_green_time = 0;  // Thời gian sáng của LED xanh (PB0)
volatile uint32_t led_yellow_time = 0; // Thời gian sáng của LED vàng (PA6)

void init_GPIO(void) {
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 0);         // Clock cho PORTA
 80002b0:	4b29      	ldr	r3, [pc, #164]	; (8000358 <init_GPIO+0xac>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b4:	4a28      	ldr	r2, [pc, #160]	; (8000358 <init_GPIO+0xac>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= (1 << 1);         // Clock cho PORTB
 80002bc:	4b26      	ldr	r3, [pc, #152]	; (8000358 <init_GPIO+0xac>)
 80002be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c0:	4a25      	ldr	r2, [pc, #148]	; (8000358 <init_GPIO+0xac>)
 80002c2:	f043 0302 	orr.w	r3, r3, #2
 80002c6:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= (1 << 2);         // Clock cho PORTC
 80002c8:	4b23      	ldr	r3, [pc, #140]	; (8000358 <init_GPIO+0xac>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002cc:	4a22      	ldr	r2, [pc, #136]	; (8000358 <init_GPIO+0xac>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOA->MODER |= (1 << (7 * 2));   // PA7 output (LED đỏ)
 80002d4:	4b21      	ldr	r3, [pc, #132]	; (800035c <init_GPIO+0xb0>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a20      	ldr	r2, [pc, #128]	; (800035c <init_GPIO+0xb0>)
 80002da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002de:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1 << (7 * 2 + 1));
 80002e0:	4b1e      	ldr	r3, [pc, #120]	; (800035c <init_GPIO+0xb0>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a1d      	ldr	r2, [pc, #116]	; (800035c <init_GPIO+0xb0>)
 80002e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002ea:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (0 * 2));   // PB0 output (LED xanh)
 80002ec:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <init_GPIO+0xb4>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <init_GPIO+0xb4>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6013      	str	r3, [r2, #0]
    GPIOB->MODER &= ~(1 << (0 * 2 + 1));
 80002f8:	4b19      	ldr	r3, [pc, #100]	; (8000360 <init_GPIO+0xb4>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a18      	ldr	r2, [pc, #96]	; (8000360 <init_GPIO+0xb4>)
 80002fe:	f023 0302 	bic.w	r3, r3, #2
 8000302:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (6 * 2));   // PA6 output (LED vàng)
 8000304:	4b15      	ldr	r3, [pc, #84]	; (800035c <init_GPIO+0xb0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a14      	ldr	r2, [pc, #80]	; (800035c <init_GPIO+0xb0>)
 800030a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800030e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1 << (6 * 2 + 1));
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <init_GPIO+0xb0>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a11      	ldr	r2, [pc, #68]	; (800035c <init_GPIO+0xb0>)
 8000316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800031a:	6013      	str	r3, [r2, #0]

    GPIOC->MODER &= ~(1 << (7 * 2));  // PC7 input (nút)
 800031c:	4b11      	ldr	r3, [pc, #68]	; (8000364 <init_GPIO+0xb8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a10      	ldr	r2, [pc, #64]	; (8000364 <init_GPIO+0xb8>)
 8000322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000326:	6013      	str	r3, [r2, #0]
    GPIOC->MODER &= ~(1 << (7 * 2 + 1));
 8000328:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <init_GPIO+0xb8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <init_GPIO+0xb8>)
 800032e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000332:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1 << (0 * 2));  // PA0 input (nút)
 8000334:	4b09      	ldr	r3, [pc, #36]	; (800035c <init_GPIO+0xb0>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a08      	ldr	r2, [pc, #32]	; (800035c <init_GPIO+0xb0>)
 800033a:	f023 0301 	bic.w	r3, r3, #1
 800033e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1 << (0 * 2 + 1));
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <init_GPIO+0xb0>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a05      	ldr	r2, [pc, #20]	; (800035c <init_GPIO+0xb0>)
 8000346:	f023 0302 	bic.w	r3, r3, #2
 800034a:	6013      	str	r3, [r2, #0]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800
 800035c:	40020000 	.word	0x40020000
 8000360:	40020400 	.word	0x40020400
 8000364:	40020800 	.word	0x40020800

08000368 <init_Interrupt>:

void init_Interrupt(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= (1 << 14);        // Bật clock SYSCFG
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <init_Interrupt+0x74>)
 800036e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000370:	4a1a      	ldr	r2, [pc, #104]	; (80003dc <init_Interrupt+0x74>)
 8000372:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000376:	6453      	str	r3, [r2, #68]	; 0x44

    SYSCFG->EXTICR[1] |= (2 << 12);    // EXTI7 gắn với PC7 (PORTC)
 8000378:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <init_Interrupt+0x78>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <init_Interrupt+0x78>)
 800037e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000382:	60d3      	str	r3, [r2, #12]
    SYSCFG->EXTICR[0] |= (0 << 4);    // EXTI0 gắn với PA0 (PORTA)
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <init_Interrupt+0x78>)
 8000386:	4a16      	ldr	r2, [pc, #88]	; (80003e0 <init_Interrupt+0x78>)
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	6093      	str	r3, [r2, #8]

    EXTI->IMR |= (1 << 0);            // Bật ngắt EXTI0
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <init_Interrupt+0x7c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <init_Interrupt+0x7c>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 0);           // Ngắt cạnh xuống EXTI0
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <init_Interrupt+0x7c>)
 800039a:	68db      	ldr	r3, [r3, #12]
 800039c:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <init_Interrupt+0x7c>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	60d3      	str	r3, [r2, #12]
    EXTI->IMR |= (1 << 7);            // Bật ngắt EXTI1
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <init_Interrupt+0x7c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <init_Interrupt+0x7c>)
 80003aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ae:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << 7);           // Ngắt cạnh xuống EXTI1
 80003b0:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <init_Interrupt+0x7c>)
 80003b2:	68db      	ldr	r3, [r3, #12]
 80003b4:	4a0b      	ldr	r2, [pc, #44]	; (80003e4 <init_Interrupt+0x7c>)
 80003b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ba:	60d3      	str	r3, [r2, #12]


    NVIC_EnableIRQ(EXTI0_IRQn);       // Bật EXTI0 trong NVIC
 80003bc:	2006      	movs	r0, #6
 80003be:	f7ff ff09 	bl	80001d4 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI0_IRQn, 1);  // Ưu tiên 1
 80003c2:	2101      	movs	r1, #1
 80003c4:	2006      	movs	r0, #6
 80003c6:	f7ff ff47 	bl	8000258 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI9_5_IRQn);       // Bật EXTI7 trong NVIC
 80003ca:	2017      	movs	r0, #23
 80003cc:	f7ff ff02 	bl	80001d4 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI9_5_IRQn, 2);  // Ưu tiên 2
 80003d0:	2102      	movs	r1, #2
 80003d2:	2017      	movs	r0, #23
 80003d4:	f7ff ff40 	bl	8000258 <__NVIC_SetPriority>
}
 80003d8:	bf00      	nop
 80003da:	bd80      	pop	{r7, pc}
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40013800 	.word	0x40013800
 80003e4:	40013c00 	.word	0x40013c00

080003e8 <init_TIM2>:

void init_TIM2(void) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 0);         // Clock cho TIM2
 80003ec:	4b14      	ldr	r3, [pc, #80]	; (8000440 <init_TIM2+0x58>)
 80003ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f0:	4a13      	ldr	r2, [pc, #76]	; (8000440 <init_TIM2+0x58>)
 80003f2:	f043 0301 	orr.w	r3, r3, #1
 80003f6:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 8399;                 // Prescaler: 10 kHz
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003fc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 999;                  // Chu kỳ 100 ms
 8000402:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000406:	f240 32e7 	movw	r2, #999	; 0x3e7
 800040a:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->DIER |= (1 << 0);           // Bật ngắt Timer
 800040c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000410:	68db      	ldr	r3, [r3, #12]
 8000412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000416:	f043 0301 	orr.w	r3, r3, #1
 800041a:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= (1 << 0);            // Bật Timer
 800041c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);
 800042c:	201c      	movs	r0, #28
 800042e:	f7ff fed1 	bl	80001d4 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 0);   // Ưu tiên 1
 8000432:	2100      	movs	r1, #0
 8000434:	201c      	movs	r0, #28
 8000436:	f7ff ff0f 	bl	8000258 <__NVIC_SetPriority>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40023800 	.word	0x40023800

08000444 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
    if (TIM2->SR & (1 << 0)) {
 8000448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800044c:	691b      	ldr	r3, [r3, #16]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	2b00      	cmp	r3, #0
 8000454:	d058      	beq.n	8000508 <TIM2_IRQHandler+0xc4>
        static uint8_t toggle = 0;
        toggle = !toggle;
 8000456:	4b2f      	ldr	r3, [pc, #188]	; (8000514 <TIM2_IRQHandler+0xd0>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	bf0c      	ite	eq
 800045e:	2301      	moveq	r3, #1
 8000460:	2300      	movne	r3, #0
 8000462:	b2db      	uxtb	r3, r3
 8000464:	461a      	mov	r2, r3
 8000466:	4b2b      	ldr	r3, [pc, #172]	; (8000514 <TIM2_IRQHandler+0xd0>)
 8000468:	701a      	strb	r2, [r3, #0]
        if (toggle) {
 800046a:	4b2a      	ldr	r3, [pc, #168]	; (8000514 <TIM2_IRQHandler+0xd0>)
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d006      	beq.n	8000480 <TIM2_IRQHandler+0x3c>
            GPIOA->ODR |= (1 << 7);   // Bật LED đỏ PA7
 8000472:	4b29      	ldr	r3, [pc, #164]	; (8000518 <TIM2_IRQHandler+0xd4>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a28      	ldr	r2, [pc, #160]	; (8000518 <TIM2_IRQHandler+0xd4>)
 8000478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	e005      	b.n	800048c <TIM2_IRQHandler+0x48>
        } else {
            GPIOA->ODR &= ~(1 << 7);  // Tắt LED đỏ PA7
 8000480:	4b25      	ldr	r3, [pc, #148]	; (8000518 <TIM2_IRQHandler+0xd4>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	4a24      	ldr	r2, [pc, #144]	; (8000518 <TIM2_IRQHandler+0xd4>)
 8000486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800048a:	6153      	str	r3, [r2, #20]
        }
        if (exti0_flag && led_green_time > 0) {
 800048c:	4b23      	ldr	r3, [pc, #140]	; (800051c <TIM2_IRQHandler+0xd8>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2b00      	cmp	r3, #0
 8000494:	d015      	beq.n	80004c2 <TIM2_IRQHandler+0x7e>
 8000496:	4b22      	ldr	r3, [pc, #136]	; (8000520 <TIM2_IRQHandler+0xdc>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d011      	beq.n	80004c2 <TIM2_IRQHandler+0x7e>
            led_green_time--;
 800049e:	4b20      	ldr	r3, [pc, #128]	; (8000520 <TIM2_IRQHandler+0xdc>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	4a1e      	ldr	r2, [pc, #120]	; (8000520 <TIM2_IRQHandler+0xdc>)
 80004a6:	6013      	str	r3, [r2, #0]
            if (led_green_time == 0) {
 80004a8:	4b1d      	ldr	r3, [pc, #116]	; (8000520 <TIM2_IRQHandler+0xdc>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d108      	bne.n	80004c2 <TIM2_IRQHandler+0x7e>
                GPIOB->ODR &= ~(1 << 0); // Tắt LED xanh PB0
 80004b0:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <TIM2_IRQHandler+0xe0>)
 80004b2:	695b      	ldr	r3, [r3, #20]
 80004b4:	4a1b      	ldr	r2, [pc, #108]	; (8000524 <TIM2_IRQHandler+0xe0>)
 80004b6:	f023 0301 	bic.w	r3, r3, #1
 80004ba:	6153      	str	r3, [r2, #20]
                exti0_flag = 0;
 80004bc:	4b17      	ldr	r3, [pc, #92]	; (800051c <TIM2_IRQHandler+0xd8>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
            }
        }
        if (exti1_flag && led_yellow_time > 0) {
 80004c2:	4b19      	ldr	r3, [pc, #100]	; (8000528 <TIM2_IRQHandler+0xe4>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d015      	beq.n	80004f8 <TIM2_IRQHandler+0xb4>
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <TIM2_IRQHandler+0xe8>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d011      	beq.n	80004f8 <TIM2_IRQHandler+0xb4>
            led_yellow_time--;
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <TIM2_IRQHandler+0xe8>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3b01      	subs	r3, #1
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <TIM2_IRQHandler+0xe8>)
 80004dc:	6013      	str	r3, [r2, #0]
            if (led_yellow_time == 0) {
 80004de:	4b13      	ldr	r3, [pc, #76]	; (800052c <TIM2_IRQHandler+0xe8>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d108      	bne.n	80004f8 <TIM2_IRQHandler+0xb4>
                GPIOA->ODR &= ~(1 << 6); // Tắt LED vàng PA6
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <TIM2_IRQHandler+0xd4>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <TIM2_IRQHandler+0xd4>)
 80004ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004f0:	6153      	str	r3, [r2, #20]
                exti1_flag = 0;
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <TIM2_IRQHandler+0xe4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
            }
        }
        TIM2->SR &= ~(1 << 0); // Xóa cờ ngắt Timer
 80004f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004fc:	691b      	ldr	r3, [r3, #16]
 80004fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000502:	f023 0301 	bic.w	r3, r3, #1
 8000506:	6113      	str	r3, [r2, #16]
    }
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	2000002c 	.word	0x2000002c
 8000518:	40020000 	.word	0x40020000
 800051c:	20000020 	.word	0x20000020
 8000520:	20000024 	.word	0x20000024
 8000524:	40020400 	.word	0x40020400
 8000528:	20000021 	.word	0x20000021
 800052c:	20000028 	.word	0x20000028

08000530 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void) {         // Ngắt EXTI0 cho PA0 (LED xanh)
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 0)) {        // Kiểm tra nếu PA0 gây ngắt
 8000534:	4b10      	ldr	r3, [pc, #64]	; (8000578 <EXTI0_IRQHandler+0x48>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	2b00      	cmp	r3, #0
 800053e:	d016      	beq.n	800056e <EXTI0_IRQHandler+0x3e>
        if (!exti0_flag) {            // Chỉ bật nếu LED xanh chưa sáng
 8000540:	4b0e      	ldr	r3, [pc, #56]	; (800057c <EXTI0_IRQHandler+0x4c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d10b      	bne.n	8000562 <EXTI0_IRQHandler+0x32>
            exti0_flag = 1;
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <EXTI0_IRQHandler+0x4c>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
            led_green_time = 5;       // 0.5 giây
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <EXTI0_IRQHandler+0x50>)
 8000552:	2205      	movs	r2, #5
 8000554:	601a      	str	r2, [r3, #0]
            GPIOB->ODR |= (1 << 0);   // Bật LED xanh PB0
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <EXTI0_IRQHandler+0x54>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a0a      	ldr	r2, [pc, #40]	; (8000584 <EXTI0_IRQHandler+0x54>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6153      	str	r3, [r2, #20]
        }
        EXTI->PR |= (1 << 0);         // Xóa cờ ngắt
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <EXTI0_IRQHandler+0x48>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	4a04      	ldr	r2, [pc, #16]	; (8000578 <EXTI0_IRQHandler+0x48>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6153      	str	r3, [r2, #20]
    }
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40013c00 	.word	0x40013c00
 800057c:	20000020 	.word	0x20000020
 8000580:	20000024 	.word	0x20000024
 8000584:	40020400 	.word	0x40020400

08000588 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void) {         // Ngắt EXTI1 cho PC7 (LED vàng)
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 7)) {        // Kiểm tra nếu PC7 gây ngắt
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <EXTI9_5_IRQHandler+0x48>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000594:	2b00      	cmp	r3, #0
 8000596:	d016      	beq.n	80005c6 <EXTI9_5_IRQHandler+0x3e>
        if (!exti1_flag) {            // Chỉ bật nếu LED vàng chưa sáng
 8000598:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <EXTI9_5_IRQHandler+0x4c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d10b      	bne.n	80005ba <EXTI9_5_IRQHandler+0x32>
            exti1_flag = 1;
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <EXTI9_5_IRQHandler+0x4c>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	701a      	strb	r2, [r3, #0]
            led_yellow_time = 5;      // 0.5 giây
 80005a8:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <EXTI9_5_IRQHandler+0x50>)
 80005aa:	2205      	movs	r2, #5
 80005ac:	601a      	str	r2, [r3, #0]
            GPIOA->ODR |= (1 << 6);   // Bật LED vàng PA6
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <EXTI9_5_IRQHandler+0x54>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a0a      	ldr	r2, [pc, #40]	; (80005dc <EXTI9_5_IRQHandler+0x54>)
 80005b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b8:	6153      	str	r3, [r2, #20]
        }
        EXTI->PR |= (1 << 7);         // Xóa cờ ngắt
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <EXTI9_5_IRQHandler+0x48>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <EXTI9_5_IRQHandler+0x48>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6153      	str	r3, [r2, #20]
    }
}
 80005c6:	bf00      	nop
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	40013c00 	.word	0x40013c00
 80005d4:	20000021 	.word	0x20000021
 80005d8:	20000028 	.word	0x20000028
 80005dc:	40020000 	.word	0x40020000

080005e0 <main>:

	int main(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    init_GPIO();
 80005e4:	f7ff fe62 	bl	80002ac <init_GPIO>
    init_Interrupt();
 80005e8:	f7ff febe 	bl	8000368 <init_Interrupt>
    init_TIM2();
 80005ec:	f7ff fefc 	bl	80003e8 <init_TIM2>
    while (1) {
    	if (!(GPIOA->IDR & (1 << 0))) {
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <main+0x2c>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	f003 0301 	and.w	r3, r3, #1
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d103      	bne.n	8000604 <main+0x24>
    	            NVIC_DisableIRQ(EXTI9_5_IRQn); // Tạm thời vô hiệu hóa EXTI7
 80005fc:	2017      	movs	r0, #23
 80005fe:	f7ff fe07 	bl	8000210 <__NVIC_DisableIRQ>
 8000602:	e7f5      	b.n	80005f0 <main+0x10>
    	        } else {
    	            NVIC_EnableIRQ(EXTI9_5_IRQn); // Kích hoạt lại EXTI7
 8000604:	2017      	movs	r0, #23
 8000606:	f7ff fde5 	bl	80001d4 <__NVIC_EnableIRQ>
    	if (!(GPIOA->IDR & (1 << 0))) {
 800060a:	e7f1      	b.n	80005f0 <main+0x10>
 800060c:	40020000 	.word	0x40020000

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <NMI_Handler+0x4>

08000616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <HardFault_Handler+0x4>

0800061c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <MemManage_Handler+0x4>

08000622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <BusFault_Handler+0x4>

08000628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <UsageFault_Handler+0x4>

0800062e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065c:	f000 f83e 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800068e:	490e      	ldr	r1, [pc, #56]	; (80006c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000690:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006a4:	4c0b      	ldr	r4, [pc, #44]	; (80006d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006b2:	f7ff ffd7 	bl	8000664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f000 f825 	bl	8000704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ba:	f7ff ff91 	bl	80005e0 <main>
  bx  lr    
 80006be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80006c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006cc:	0800076c 	.word	0x0800076c
  ldr r2, =_sbss
 80006d0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006d4:	20000034 	.word	0x20000034

080006d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC_IRQHandler>
	...

080006dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <HAL_IncTick+0x20>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_IncTick+0x24>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4413      	add	r3, r2
 80006ec:	4a04      	ldr	r2, [pc, #16]	; (8000700 <HAL_IncTick+0x24>)
 80006ee:	6013      	str	r3, [r2, #0]
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	20000000 	.word	0x20000000
 8000700:	20000030 	.word	0x20000030

08000704 <__libc_init_array>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	4d0d      	ldr	r5, [pc, #52]	; (800073c <__libc_init_array+0x38>)
 8000708:	4c0d      	ldr	r4, [pc, #52]	; (8000740 <__libc_init_array+0x3c>)
 800070a:	1b64      	subs	r4, r4, r5
 800070c:	10a4      	asrs	r4, r4, #2
 800070e:	2600      	movs	r6, #0
 8000710:	42a6      	cmp	r6, r4
 8000712:	d109      	bne.n	8000728 <__libc_init_array+0x24>
 8000714:	4d0b      	ldr	r5, [pc, #44]	; (8000744 <__libc_init_array+0x40>)
 8000716:	4c0c      	ldr	r4, [pc, #48]	; (8000748 <__libc_init_array+0x44>)
 8000718:	f000 f818 	bl	800074c <_init>
 800071c:	1b64      	subs	r4, r4, r5
 800071e:	10a4      	asrs	r4, r4, #2
 8000720:	2600      	movs	r6, #0
 8000722:	42a6      	cmp	r6, r4
 8000724:	d105      	bne.n	8000732 <__libc_init_array+0x2e>
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f855 3b04 	ldr.w	r3, [r5], #4
 800072c:	4798      	blx	r3
 800072e:	3601      	adds	r6, #1
 8000730:	e7ee      	b.n	8000710 <__libc_init_array+0xc>
 8000732:	f855 3b04 	ldr.w	r3, [r5], #4
 8000736:	4798      	blx	r3
 8000738:	3601      	adds	r6, #1
 800073a:	e7f2      	b.n	8000722 <__libc_init_array+0x1e>
 800073c:	08000764 	.word	0x08000764
 8000740:	08000764 	.word	0x08000764
 8000744:	08000764 	.word	0x08000764
 8000748:	08000768 	.word	0x08000768

0800074c <_init>:
 800074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074e:	bf00      	nop
 8000750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000752:	bc08      	pop	{r3}
 8000754:	469e      	mov	lr, r3
 8000756:	4770      	bx	lr

08000758 <_fini>:
 8000758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075a:	bf00      	nop
 800075c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800075e:	bc08      	pop	{r3}
 8000760:	469e      	mov	lr, r3
 8000762:	4770      	bx	lr
