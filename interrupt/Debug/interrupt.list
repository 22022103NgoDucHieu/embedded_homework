
interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000364  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f8  080004f8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f8  080004f8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004f8  080004f8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004f8  080004f8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f8  080004f8  000104f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004fc  080004fc  000104fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000500  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000504  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000504  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001896  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005e0  00000000  00000000  0002190d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00021ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000156  00000000  00000000  000220d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013e1a  00000000  00000000  0002222e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021d2  00000000  00000000  00036048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fa68  00000000  00000000  0003821a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005dc  00000000  00000000  000b7c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b8260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004e0 	.word	0x080004e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004e0 	.word	0x080004e0

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	; (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	; (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <init_GPIO>:
#include <main.h>
#include <stm32f4xx.h>

void init_GPIO(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1 << 0); // KÍch hoạt clock cho PORTA
 8000268:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <init_GPIO+0x70>)
 800026a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800026c:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <init_GPIO+0x70>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= (1 << 2);// KÍch hoạt clock cho PORTC
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <init_GPIO+0x70>)
 8000276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000278:	4a16      	ldr	r2, [pc, #88]	; (80002d4 <init_GPIO+0x70>)
 800027a:	f043 0304 	orr.w	r3, r3, #4
 800027e:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER |= (1 << (5 * 2)); // Thiết lập chân PA5 ở chế độ output
 8000280:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <init_GPIO+0x74>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <init_GPIO+0x74>)
 8000286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800028a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1 << (5 * 2 + 1));
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <init_GPIO+0x74>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <init_GPIO+0x74>)
 8000292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000296:	6013      	str	r3, [r2, #0]

	GPIOA->PUPDR |= (1 << (5 * 2)); //Thiết lập chế đôj mặc đinh của PA5 là pull-up
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <init_GPIO+0x74>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <init_GPIO+0x74>)
 800029e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002a2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1 << (5 * 2 + 1));
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <init_GPIO+0x74>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <init_GPIO+0x74>)
 80002aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002ae:	60d3      	str	r3, [r2, #12]

	GPIOC->MODER &= ~(1 << (13 * 2)); //Thiết lập chân PC13 ở chế độ output(đã được nối sẵn với nút của board theo kiểu pull-up)
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <init_GPIO+0x78>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a09      	ldr	r2, [pc, #36]	; (80002dc <init_GPIO+0x78>)
 80002b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1 << (13 * 2 + 1));
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <init_GPIO+0x78>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <init_GPIO+0x78>)
 80002c2:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002c6:	6013      	str	r3, [r2, #0]

}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40020800 	.word	0x40020800

080002e0 <init_Interupt>:


void init_Interupt(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 14);  // Bật clock SYSCFG
 80002e4:	4b10      	ldr	r3, [pc, #64]	; (8000328 <init_Interupt+0x48>)
 80002e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002e8:	4a0f      	ldr	r2, [pc, #60]	; (8000328 <init_Interupt+0x48>)
 80002ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ee:	6453      	str	r3, [r2, #68]	; 0x44

	SYSCFG->EXTICR[3] |= (2 << 4);  // EXTI13 kết nối với PC13
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <init_Interupt+0x4c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <init_Interupt+0x4c>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6153      	str	r3, [r2, #20]

	EXTI->IMR |= (1 << 13);   // Bật ngắt EXTI13
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <init_Interupt+0x50>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a0b      	ldr	r2, [pc, #44]	; (8000330 <init_Interupt+0x50>)
 8000302:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000306:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= (1 << 13);  // Kích hoạt ngắt cạnh xuống (Falling edge)
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <init_Interupt+0x50>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a08      	ldr	r2, [pc, #32]	; (8000330 <init_Interupt+0x50>)
 800030e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000312:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(EXTI15_10_IRQn);  // Bật ngắt trong NVIC
 8000314:	2028      	movs	r0, #40	; 0x28
 8000316:	f7ff ff5d 	bl	80001d4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn, 2);  // Đặt mức ưu tiên
 800031a:	2102      	movs	r1, #2
 800031c:	2028      	movs	r0, #40	; 0x28
 800031e:	f7ff ff77 	bl	8000210 <__NVIC_SetPriority>



}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40023800 	.word	0x40023800
 800032c:	40013800 	.word	0x40013800
 8000330:	40013c00 	.word	0x40013c00

08000334 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) { // hàm để bắt sự kiện ngắt ở các đường dẫn từ EXTI10 đến EXTI15
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1 << 13)) {  // Kiểm tra nếu PC13 gây ngắt
 800033a:	4b14      	ldr	r3, [pc, #80]	; (800038c <EXTI15_10_IRQHandler+0x58>)
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000342:	2b00      	cmp	r3, #0
 8000344:	d01b      	beq.n	800037e <EXTI15_10_IRQHandler+0x4a>
    	uint32_t previous_state = (GPIOA->ODR >> 5) & 0x1; // đọc trạng thái chân PA5
 8000346:	4b12      	ldr	r3, [pc, #72]	; (8000390 <EXTI15_10_IRQHandler+0x5c>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	095b      	lsrs	r3, r3, #5
 800034c:	f003 0301 	and.w	r3, r3, #1
 8000350:	607b      	str	r3, [r7, #4]
    	       if (previous_state == 0) // nếu bằng 0 thì cấp điện áp
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d106      	bne.n	8000366 <EXTI15_10_IRQHandler+0x32>
    	       {
    	                GPIOA->ODR |= 1 << 5;
 8000358:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <EXTI15_10_IRQHandler+0x5c>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	4a0c      	ldr	r2, [pc, #48]	; (8000390 <EXTI15_10_IRQHandler+0x5c>)
 800035e:	f043 0320 	orr.w	r3, r3, #32
 8000362:	6153      	str	r3, [r2, #20]
 8000364:	e005      	b.n	8000372 <EXTI15_10_IRQHandler+0x3e>
    	       }
    	      else // nếu bằng 1 thì dừng cấp điện
    	       {
    	    	  	  	 GPIOA->ODR &= ~(1 << 5);
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <EXTI15_10_IRQHandler+0x5c>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	4a09      	ldr	r2, [pc, #36]	; (8000390 <EXTI15_10_IRQHandler+0x5c>)
 800036c:	f023 0320 	bic.w	r3, r3, #32
 8000370:	6153      	str	r3, [r2, #20]
    	       }
        EXTI->PR |= (1 << 13);  // Xóa cờ ngắt
 8000372:	4b06      	ldr	r3, [pc, #24]	; (800038c <EXTI15_10_IRQHandler+0x58>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a05      	ldr	r2, [pc, #20]	; (800038c <EXTI15_10_IRQHandler+0x58>)
 8000378:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800037c:	6153      	str	r3, [r2, #20]
    }
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40013c00 	.word	0x40013c00
 8000390:	40020000 	.word	0x40020000

08000394 <main>:


int main(void) {
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	init_GPIO();
 8000398:	f7ff ff64 	bl	8000264 <init_GPIO>
	init_Interupt();
 800039c:	f7ff ffa0 	bl	80002e0 <init_Interupt>

	while(1);
 80003a0:	e7fe      	b.n	80003a0 <main+0xc>

080003a2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <NMI_Handler+0x4>

080003a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <HardFault_Handler+0x4>

080003ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <MemManage_Handler+0x4>

080003b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <BusFault_Handler+0x4>

080003ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003be:	e7fe      	b.n	80003be <UsageFault_Handler+0x4>

080003c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ce:	b480      	push	{r7}
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr

080003ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ea:	b580      	push	{r7, lr}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ee:	f000 f83f 	bl	8000470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
	...

080003f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003fc:	4b06      	ldr	r3, [pc, #24]	; (8000418 <SystemInit+0x20>)
 80003fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000402:	4a05      	ldr	r2, [pc, #20]	; (8000418 <SystemInit+0x20>)
 8000404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	e000ed00 	.word	0xe000ed00

0800041c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800041c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000422:	490e      	ldr	r1, [pc, #56]	; (800045c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000424:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000428:	e002      	b.n	8000430 <LoopCopyDataInit>

0800042a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800042a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800042c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800042e:	3304      	adds	r3, #4

08000430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000434:	d3f9      	bcc.n	800042a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000436:	4a0b      	ldr	r2, [pc, #44]	; (8000464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000438:	4c0b      	ldr	r4, [pc, #44]	; (8000468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800043c:	e001      	b.n	8000442 <LoopFillZerobss>

0800043e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800043e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000440:	3204      	adds	r2, #4

08000442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000444:	d3fb      	bcc.n	800043e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000446:	f7ff ffd7 	bl	80003f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800044a:	f000 f825 	bl	8000498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800044e:	f7ff ffa1 	bl	8000394 <main>
  bx  lr    
 8000452:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000454:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800045c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000460:	08000500 	.word	0x08000500
  ldr r2, =_sbss
 8000464:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000468:	20000024 	.word	0x20000024

0800046c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800046c:	e7fe      	b.n	800046c <ADC_IRQHandler>
	...

08000470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <HAL_IncTick+0x20>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	461a      	mov	r2, r3
 800047a:	4b06      	ldr	r3, [pc, #24]	; (8000494 <HAL_IncTick+0x24>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4413      	add	r3, r2
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <HAL_IncTick+0x24>)
 8000482:	6013      	str	r3, [r2, #0]
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000000 	.word	0x20000000
 8000494:	20000020 	.word	0x20000020

08000498 <__libc_init_array>:
 8000498:	b570      	push	{r4, r5, r6, lr}
 800049a:	4d0d      	ldr	r5, [pc, #52]	; (80004d0 <__libc_init_array+0x38>)
 800049c:	4c0d      	ldr	r4, [pc, #52]	; (80004d4 <__libc_init_array+0x3c>)
 800049e:	1b64      	subs	r4, r4, r5
 80004a0:	10a4      	asrs	r4, r4, #2
 80004a2:	2600      	movs	r6, #0
 80004a4:	42a6      	cmp	r6, r4
 80004a6:	d109      	bne.n	80004bc <__libc_init_array+0x24>
 80004a8:	4d0b      	ldr	r5, [pc, #44]	; (80004d8 <__libc_init_array+0x40>)
 80004aa:	4c0c      	ldr	r4, [pc, #48]	; (80004dc <__libc_init_array+0x44>)
 80004ac:	f000 f818 	bl	80004e0 <_init>
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	10a4      	asrs	r4, r4, #2
 80004b4:	2600      	movs	r6, #0
 80004b6:	42a6      	cmp	r6, r4
 80004b8:	d105      	bne.n	80004c6 <__libc_init_array+0x2e>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004c0:	4798      	blx	r3
 80004c2:	3601      	adds	r6, #1
 80004c4:	e7ee      	b.n	80004a4 <__libc_init_array+0xc>
 80004c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ca:	4798      	blx	r3
 80004cc:	3601      	adds	r6, #1
 80004ce:	e7f2      	b.n	80004b6 <__libc_init_array+0x1e>
 80004d0:	080004f8 	.word	0x080004f8
 80004d4:	080004f8 	.word	0x080004f8
 80004d8:	080004f8 	.word	0x080004f8
 80004dc:	080004fc 	.word	0x080004fc

080004e0 <_init>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr

080004ec <_fini>:
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	bf00      	nop
 80004f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f2:	bc08      	pop	{r3}
 80004f4:	469e      	mov	lr, r3
 80004f6:	4770      	bx	lr
