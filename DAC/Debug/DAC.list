
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000031c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080004b0  080004b0  000104b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005d0  080005d0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080005d0  080005d0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d0  080005d0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d0  080005d0  000105d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d4  080005d4  000105d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005d8  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080005dc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080005dc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000177f  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005a8  00000000  00000000  000217f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  00021da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000151  00000000  00000000  00021f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013dc5  00000000  00000000  000220d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021bc  00000000  00000000  00035e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fa61  00000000  00000000  00038052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005b4  00000000  00000000  000b7ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b8068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000498 	.word	0x08000498

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000498 	.word	0x08000498

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	; (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <main>:
void GPIO_Init(void);
void Timer_Init(void);

volatile uint8_t index = 0;

int main(void) {
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
    GPIO_Init();
 8000214:	f000 f804 	bl	8000220 <GPIO_Init>
    Timer_Init();
 8000218:	f000 f82a 	bl	8000270 <Timer_Init>

    while (1) {
 800021c:	e7fe      	b.n	800021c <main+0xc>
	...

08000220 <GPIO_Init>:
//        if (!(GPIOB->IDR & GPIO_IDR_ID2)) waveform = TRIANGLE;
    }
}

// ===================== GPIO =====================
void GPIO_Init(void) {
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN; // Bật clock GPIOB, GPIOC
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <GPIO_Init+0x44>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000228:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <GPIO_Init+0x44>)
 800022a:	f043 0306 	orr.w	r3, r3, #6
 800022e:	6313      	str	r3, [r2, #48]	; 0x30

    // Cấu hình PC0-PC7 là Output (R-2R DAC)
    GPIOC->MODER |= 0x5555;
 8000230:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <GPIO_Init+0x48>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a0c      	ldr	r2, [pc, #48]	; (8000268 <GPIO_Init+0x48>)
 8000236:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 800023a:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800023e:	6013      	str	r3, [r2, #0]

    // Cấu hình PB0, PB1, PB2 là Input Pull-up
    GPIOB->MODER &= ~(GPIO_MODER_MODER0 | GPIO_MODER_MODER1 | GPIO_MODER_MODER2);
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <GPIO_Init+0x4c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a09      	ldr	r2, [pc, #36]	; (800026c <GPIO_Init+0x4c>)
 8000246:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800024a:	6013      	str	r3, [r2, #0]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPD0_0 | GPIO_PUPDR_PUPD1_0 | GPIO_PUPDR_PUPD2_0);
 800024c:	4b07      	ldr	r3, [pc, #28]	; (800026c <GPIO_Init+0x4c>)
 800024e:	68db      	ldr	r3, [r3, #12]
 8000250:	4a06      	ldr	r2, [pc, #24]	; (800026c <GPIO_Init+0x4c>)
 8000252:	f043 0315 	orr.w	r3, r3, #21
 8000256:	60d3      	str	r3, [r2, #12]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40023800 	.word	0x40023800
 8000268:	40020800 	.word	0x40020800
 800026c:	40020400 	.word	0x40020400

08000270 <Timer_Init>:

// ===================== TIMER =====================
void Timer_Init(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Bật clock TIM2
 8000274:	4b11      	ldr	r3, [pc, #68]	; (80002bc <Timer_Init+0x4c>)
 8000276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000278:	4a10      	ldr	r2, [pc, #64]	; (80002bc <Timer_Init+0x4c>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	6413      	str	r3, [r2, #64]	; 0x40
    TIM2->PSC = 84 - 1;   // Chia tần số (1 MHz)
 8000280:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000284:	2253      	movs	r2, #83	; 0x53
 8000286:	629a      	str	r2, [r3, #40]	; 0x28
    TIM2->ARR = 200 - 1;  // Ngắt mỗi 200 us (tần số ~5 kHz)
 8000288:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800028c:	22c7      	movs	r2, #199	; 0xc7
 800028e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->DIER |= TIM_DIER_UIE; // Cho phép ngắt update
 8000290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000294:	68db      	ldr	r3, [r3, #12]
 8000296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800029a:	f043 0301 	orr.w	r3, r3, #1
 800029e:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);  // Bật ngắt TIM2
 80002a0:	201c      	movs	r0, #28
 80002a2:	f7ff ff97 	bl	80001d4 <__NVIC_EnableIRQ>
    TIM2->CR1 |= TIM_CR1_CEN;   // Kích hoạt timer
 80002a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	6013      	str	r3, [r2, #0]
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800

080002c0 <TIM2_IRQHandler>:

// ===================== TIMER INTERRUPT =====================
void TIM2_IRQHandler(void) {
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 80002c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002ca:	691b      	ldr	r3, [r3, #16]
 80002cc:	f003 0301 	and.w	r3, r3, #1
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d032      	beq.n	800033a <TIM2_IRQHandler+0x7a>
        TIM2->SR &= ~TIM_SR_UIF;  // Xóa cờ ngắt
 80002d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d8:	691b      	ldr	r3, [r3, #16]
 80002da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002de:	f023 0301 	bic.w	r3, r3, #1
 80002e2:	6113      	str	r3, [r2, #16]

        uint8_t value;
        if (waveform == SIN) value = sine_wave[index];
 80002e4:	4b18      	ldr	r3, [pc, #96]	; (8000348 <TIM2_IRQHandler+0x88>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d107      	bne.n	80002fc <TIM2_IRQHandler+0x3c>
 80002ec:	4b17      	ldr	r3, [pc, #92]	; (800034c <TIM2_IRQHandler+0x8c>)
 80002ee:	781b      	ldrb	r3, [r3, #0]
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <TIM2_IRQHandler+0x90>)
 80002f6:	5c9b      	ldrb	r3, [r3, r2]
 80002f8:	71fb      	strb	r3, [r7, #7]
 80002fa:	e00d      	b.n	8000318 <TIM2_IRQHandler+0x58>
        else if (waveform == SQUARE) value = square_wave[index];
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <TIM2_IRQHandler+0x88>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2b01      	cmp	r3, #1
 8000302:	d107      	bne.n	8000314 <TIM2_IRQHandler+0x54>
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <TIM2_IRQHandler+0x8c>)
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	b2db      	uxtb	r3, r3
 800030a:	461a      	mov	r2, r3
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <TIM2_IRQHandler+0x94>)
 800030e:	5c9b      	ldrb	r3, [r3, r2]
 8000310:	71fb      	strb	r3, [r7, #7]
 8000312:	e001      	b.n	8000318 <TIM2_IRQHandler+0x58>
        else value = 255;
 8000314:	23ff      	movs	r3, #255	; 0xff
 8000316:	71fb      	strb	r3, [r7, #7]

        GPIOC->ODR = value;  // Xuất dữ liệu ra GPIOC (R-2R DAC)
 8000318:	4a0f      	ldr	r2, [pc, #60]	; (8000358 <TIM2_IRQHandler+0x98>)
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	6153      	str	r3, [r2, #20]
        index = (index + 1) % 32;  // Lặp lại LUT
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <TIM2_IRQHandler+0x8c>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	b2db      	uxtb	r3, r3
 8000324:	3301      	adds	r3, #1
 8000326:	425a      	negs	r2, r3
 8000328:	f003 031f 	and.w	r3, r3, #31
 800032c:	f002 021f 	and.w	r2, r2, #31
 8000330:	bf58      	it	pl
 8000332:	4253      	negpl	r3, r2
 8000334:	b2da      	uxtb	r2, r3
 8000336:	4b05      	ldr	r3, [pc, #20]	; (800034c <TIM2_IRQHandler+0x8c>)
 8000338:	701a      	strb	r2, [r3, #0]
    }
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000000 	.word	0x20000000
 800034c:	20000020 	.word	0x20000020
 8000350:	080004b0 	.word	0x080004b0
 8000354:	080005b0 	.word	0x080005b0
 8000358:	40020800 	.word	0x40020800

0800035c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <NMI_Handler+0x4>

08000362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <HardFault_Handler+0x4>

08000368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800036c:	e7fe      	b.n	800036c <MemManage_Handler+0x4>

0800036e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <BusFault_Handler+0x4>

08000374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <UsageFault_Handler+0x4>

0800037a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000396:	b480      	push	{r7}
 8000398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a8:	f000 f83e 	bl	8000428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <SystemInit+0x20>)
 80003b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ba:	4a05      	ldr	r2, [pc, #20]	; (80003d0 <SystemInit+0x20>)
 80003bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000ed00 	.word	0xe000ed00

080003d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800040c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003d8:	480d      	ldr	r0, [pc, #52]	; (8000410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003da:	490e      	ldr	r1, [pc, #56]	; (8000414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003dc:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0b      	ldr	r2, [pc, #44]	; (800041c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003f0:	4c0b      	ldr	r4, [pc, #44]	; (8000420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003fe:	f7ff ffd7 	bl	80003b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000402:	f000 f825 	bl	8000450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000406:	f7ff ff03 	bl	8000210 <main>
  bx  lr    
 800040a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800040c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000414:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000418:	080005d8 	.word	0x080005d8
  ldr r2, =_sbss
 800041c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000420:	20000028 	.word	0x20000028

08000424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000424:	e7fe      	b.n	8000424 <ADC_IRQHandler>
	...

08000428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <HAL_IncTick+0x20>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	461a      	mov	r2, r3
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <HAL_IncTick+0x24>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4413      	add	r3, r2
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <HAL_IncTick+0x24>)
 800043a:	6013      	str	r3, [r2, #0]
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	20000001 	.word	0x20000001
 800044c:	20000024 	.word	0x20000024

08000450 <__libc_init_array>:
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	4d0d      	ldr	r5, [pc, #52]	; (8000488 <__libc_init_array+0x38>)
 8000454:	4c0d      	ldr	r4, [pc, #52]	; (800048c <__libc_init_array+0x3c>)
 8000456:	1b64      	subs	r4, r4, r5
 8000458:	10a4      	asrs	r4, r4, #2
 800045a:	2600      	movs	r6, #0
 800045c:	42a6      	cmp	r6, r4
 800045e:	d109      	bne.n	8000474 <__libc_init_array+0x24>
 8000460:	4d0b      	ldr	r5, [pc, #44]	; (8000490 <__libc_init_array+0x40>)
 8000462:	4c0c      	ldr	r4, [pc, #48]	; (8000494 <__libc_init_array+0x44>)
 8000464:	f000 f818 	bl	8000498 <_init>
 8000468:	1b64      	subs	r4, r4, r5
 800046a:	10a4      	asrs	r4, r4, #2
 800046c:	2600      	movs	r6, #0
 800046e:	42a6      	cmp	r6, r4
 8000470:	d105      	bne.n	800047e <__libc_init_array+0x2e>
 8000472:	bd70      	pop	{r4, r5, r6, pc}
 8000474:	f855 3b04 	ldr.w	r3, [r5], #4
 8000478:	4798      	blx	r3
 800047a:	3601      	adds	r6, #1
 800047c:	e7ee      	b.n	800045c <__libc_init_array+0xc>
 800047e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000482:	4798      	blx	r3
 8000484:	3601      	adds	r6, #1
 8000486:	e7f2      	b.n	800046e <__libc_init_array+0x1e>
 8000488:	080005d0 	.word	0x080005d0
 800048c:	080005d0 	.word	0x080005d0
 8000490:	080005d0 	.word	0x080005d0
 8000494:	080005d4 	.word	0x080005d4

08000498 <_init>:
 8000498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800049a:	bf00      	nop
 800049c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049e:	bc08      	pop	{r3}
 80004a0:	469e      	mov	lr, r3
 80004a2:	4770      	bx	lr

080004a4 <_fini>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr
