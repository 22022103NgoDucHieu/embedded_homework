
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000300  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000494  08000494  00010494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080004a4  080004a4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004a4  080004a4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004a4  080004a4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004a4  080004a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004a8  080004a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004ac  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004b0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004b0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001350  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000543  00000000  00000000  000213c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00021910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000157  00000000  00000000  00021af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013e02  00000000  00000000  00021c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021c0  00000000  00000000  00035a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fbf9  00000000  00000000  00037c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005e0  00000000  00000000  000b780c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000b7dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800047c 	.word	0x0800047c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	0800047c 	.word	0x0800047c

080001d4 <delay_ms>:
#define USART2_DR       (*(volatile uint32_t *)(USART2_BASE + 0x04))
#define USART2_BRR      (*(volatile uint32_t *)(USART2_BASE + 0x08))
#define USART2_CR1      (*(volatile uint32_t *)(USART2_BASE + 0x0C))

// Hàm delay đơn giản
void delay_ms(uint32_t ms) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms * 8000; i++); // Ước lượng cho 16 MHz
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e002      	b.n	80001e8 <delay_ms+0x14>
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80001ee:	fb02 f303 	mul.w	r3, r2, r3
 80001f2:	68fa      	ldr	r2, [r7, #12]
 80001f4:	429a      	cmp	r2, r3
 80001f6:	d3f4      	bcc.n	80001e2 <delay_ms+0xe>
}
 80001f8:	bf00      	nop
 80001fa:	bf00      	nop
 80001fc:	3714      	adds	r7, #20
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
	...

08000208 <GPIO_Init>:

// Hàm khởi tạo GPIO cho UART2 (PA2: TX, PA3: RX)
void GPIO_Init(void) {
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 0); // Bật clock cho GPIOA
 800020c:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <GPIO_Init+0x7c>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a1c      	ldr	r2, [pc, #112]	; (8000284 <GPIO_Init+0x7c>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	; 0x30

    // Cấu hình PA2, PA3 là Alternate Function
    GPIOA->MODER &= ~(3 << 4); // Xóa bit PA2
 8000218:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <GPIO_Init+0x80>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a1a      	ldr	r2, [pc, #104]	; (8000288 <GPIO_Init+0x80>)
 800021e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000222:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << 4);  // PA2: Alternate Function
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <GPIO_Init+0x80>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <GPIO_Init+0x80>)
 800022a:	f043 0320 	orr.w	r3, r3, #32
 800022e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(3 << 6); // Xóa bit PA3
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <GPIO_Init+0x80>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a14      	ldr	r2, [pc, #80]	; (8000288 <GPIO_Init+0x80>)
 8000236:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800023a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << 6);  // PA3: Alternate Function
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <GPIO_Init+0x80>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a11      	ldr	r2, [pc, #68]	; (8000288 <GPIO_Init+0x80>)
 8000242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000246:	6013      	str	r3, [r2, #0]

    // Cấu hình Alternate Function AF7 (USART2) cho PA2, PA3
    GPIOA->AFR[0] &= ~(0xF << 8); // Xóa bit AF cho PA2
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <GPIO_Init+0x80>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a0e      	ldr	r2, [pc, #56]	; (8000288 <GPIO_Init+0x80>)
 800024e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000252:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << 8);    // PA2: AF7
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <GPIO_Init+0x80>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <GPIO_Init+0x80>)
 800025a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800025e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(0xF << 12); // Xóa bit AF cho PA3
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <GPIO_Init+0x80>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a08      	ldr	r2, [pc, #32]	; (8000288 <GPIO_Init+0x80>)
 8000266:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800026a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (7 << 12);   // PA3: AF7
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <GPIO_Init+0x80>)
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	4a05      	ldr	r2, [pc, #20]	; (8000288 <GPIO_Init+0x80>)
 8000272:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000276:	6213      	str	r3, [r2, #32]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800
 8000288:	40020000 	.word	0x40020000

0800028c <UART2_Init>:

// Hàm khởi tạo UART2
void UART2_Init(void) {
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 17); // Bật clock cho USART2
 8000290:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <UART2_Init+0x28>)
 8000292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <UART2_Init+0x28>)
 8000296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800029a:	6413      	str	r3, [r2, #64]	; 0x40

    // Cấu hình Baud Rate = 115200, fCK = 16 MHz
    USART2->BRR = (8 << 4) | 11; // DIV_Mantissa = 8, DIV_Fraction = 11
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <UART2_Init+0x2c>)
 800029e:	228b      	movs	r2, #139	; 0x8b
 80002a0:	609a      	str	r2, [r3, #8]

    // Cấu hình USART2: 8 bits, 1 stop bit, no parity
    USART2->CR1 = (1 << 13) | // Bật USART
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <UART2_Init+0x2c>)
 80002a4:	f242 0208 	movw	r2, #8200	; 0x2008
 80002a8:	60da      	str	r2, [r3, #12]
                 (1 << 3);   // Bật TX
                 // RX không cần bật do chỉ gửi dữ liệu
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40004400 	.word	0x40004400

080002bc <UART2_Transmit_char>:

// Hàm gửi một ký tự qua UART2
void UART2_Transmit_char(char c) {
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & (1 << 7))); // Chờ TXE (Transmit Data Register Empty)
 80002c6:	bf00      	nop
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <UART2_Transmit_char+0x2c>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f9      	beq.n	80002c8 <UART2_Transmit_char+0xc>
    USART2->DR = c; // Ghi ký tự vào DR
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <UART2_Transmit_char+0x2c>)
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	6053      	str	r3, [r2, #4]
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40004400 	.word	0x40004400

080002ec <UART2_Transmit_string>:

// Hàm gửi chuỗi qua UART2
void UART2_Transmit_string(char *str) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
    while (*str) {
 80002f4:	e006      	b.n	8000304 <UART2_Transmit_string+0x18>
        UART2_Transmit_char(*str++);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	1c5a      	adds	r2, r3, #1
 80002fa:	607a      	str	r2, [r7, #4]
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ffdc 	bl	80002bc <UART2_Transmit_char>
    while (*str) {
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d1f4      	bne.n	80002f6 <UART2_Transmit_string+0xa>
    }
}
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <main>:

int main(void) {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
    // Khởi tạo GPIO và UART2
    GPIO_Init();
 800031e:	f7ff ff73 	bl	8000208 <GPIO_Init>
    UART2_Init();
 8000322:	f7ff ffb3 	bl	800028c <UART2_Init>

    // Chuỗi cần gửi
    char *msg = "Hello Stm32\r\n";
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <main+0x24>)
 8000328:	607b      	str	r3, [r7, #4]

    while (1) {
        UART2_Transmit_string(msg); // Gửi chuỗi
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f7ff ffde 	bl	80002ec <UART2_Transmit_string>
        delay_ms(1000); // Đợi 1 giây
 8000330:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000334:	f7ff ff4e 	bl	80001d4 <delay_ms>
        UART2_Transmit_string(msg); // Gửi chuỗi
 8000338:	e7f7      	b.n	800032a <main+0x12>
 800033a:	bf00      	nop
 800033c:	08000494 	.word	0x08000494

08000340 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000344:	e7fe      	b.n	8000344 <NMI_Handler+0x4>

08000346 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000346:	b480      	push	{r7}
 8000348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034a:	e7fe      	b.n	800034a <HardFault_Handler+0x4>

0800034c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000350:	e7fe      	b.n	8000350 <MemManage_Handler+0x4>

08000352 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000352:	b480      	push	{r7}
 8000354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000356:	e7fe      	b.n	8000356 <BusFault_Handler+0x4>

08000358 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800035c:	e7fe      	b.n	800035c <UsageFault_Handler+0x4>

0800035e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000362:	bf00      	nop
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr

0800037a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037e:	bf00      	nop
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800038c:	f000 f83e 	bl	800040c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000390:	bf00      	nop
 8000392:	bd80      	pop	{r7, pc}

08000394 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <SystemInit+0x20>)
 800039a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800039e:	4a05      	ldr	r2, [pc, #20]	; (80003b4 <SystemInit+0x20>)
 80003a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	e000ed00 	.word	0xe000ed00

080003b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003bc:	480d      	ldr	r0, [pc, #52]	; (80003f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003be:	490e      	ldr	r1, [pc, #56]	; (80003f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003c0:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c4:	e002      	b.n	80003cc <LoopCopyDataInit>

080003c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ca:	3304      	adds	r3, #4

080003cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d0:	d3f9      	bcc.n	80003c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003d2:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003d4:	4c0b      	ldr	r4, [pc, #44]	; (8000404 <LoopFillZerobss+0x26>)
  movs r3, #0
 80003d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d8:	e001      	b.n	80003de <LoopFillZerobss>

080003da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003dc:	3204      	adds	r2, #4

080003de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e0:	d3fb      	bcc.n	80003da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003e2:	f7ff ffd7 	bl	8000394 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003e6:	f000 f825 	bl	8000434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ea:	f7ff ff95 	bl	8000318 <main>
  bx  lr    
 80003ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003fc:	080004ac 	.word	0x080004ac
  ldr r2, =_sbss
 8000400:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000404:	20000024 	.word	0x20000024

08000408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000408:	e7fe      	b.n	8000408 <ADC_IRQHandler>
	...

0800040c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000410:	4b06      	ldr	r3, [pc, #24]	; (800042c <HAL_IncTick+0x20>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	461a      	mov	r2, r3
 8000416:	4b06      	ldr	r3, [pc, #24]	; (8000430 <HAL_IncTick+0x24>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4413      	add	r3, r2
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_IncTick+0x24>)
 800041e:	6013      	str	r3, [r2, #0]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	20000000 	.word	0x20000000
 8000430:	20000020 	.word	0x20000020

08000434 <__libc_init_array>:
 8000434:	b570      	push	{r4, r5, r6, lr}
 8000436:	4d0d      	ldr	r5, [pc, #52]	; (800046c <__libc_init_array+0x38>)
 8000438:	4c0d      	ldr	r4, [pc, #52]	; (8000470 <__libc_init_array+0x3c>)
 800043a:	1b64      	subs	r4, r4, r5
 800043c:	10a4      	asrs	r4, r4, #2
 800043e:	2600      	movs	r6, #0
 8000440:	42a6      	cmp	r6, r4
 8000442:	d109      	bne.n	8000458 <__libc_init_array+0x24>
 8000444:	4d0b      	ldr	r5, [pc, #44]	; (8000474 <__libc_init_array+0x40>)
 8000446:	4c0c      	ldr	r4, [pc, #48]	; (8000478 <__libc_init_array+0x44>)
 8000448:	f000 f818 	bl	800047c <_init>
 800044c:	1b64      	subs	r4, r4, r5
 800044e:	10a4      	asrs	r4, r4, #2
 8000450:	2600      	movs	r6, #0
 8000452:	42a6      	cmp	r6, r4
 8000454:	d105      	bne.n	8000462 <__libc_init_array+0x2e>
 8000456:	bd70      	pop	{r4, r5, r6, pc}
 8000458:	f855 3b04 	ldr.w	r3, [r5], #4
 800045c:	4798      	blx	r3
 800045e:	3601      	adds	r6, #1
 8000460:	e7ee      	b.n	8000440 <__libc_init_array+0xc>
 8000462:	f855 3b04 	ldr.w	r3, [r5], #4
 8000466:	4798      	blx	r3
 8000468:	3601      	adds	r6, #1
 800046a:	e7f2      	b.n	8000452 <__libc_init_array+0x1e>
 800046c:	080004a4 	.word	0x080004a4
 8000470:	080004a4 	.word	0x080004a4
 8000474:	080004a4 	.word	0x080004a4
 8000478:	080004a8 	.word	0x080004a8

0800047c <_init>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr

08000488 <_fini>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr
