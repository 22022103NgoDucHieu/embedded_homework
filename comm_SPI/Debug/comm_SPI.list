
comm_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000328  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004bc  080004bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004bc  080004bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080004bc  080004bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004bc  080004bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004bc  080004bc  000104bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004c0  080004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004c4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080004c8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080004c8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001342  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004f3  00000000  00000000  000213b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  000218b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000014b  00000000  00000000  00021a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013db3  00000000  00000000  00021bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021e3  00000000  00000000  00035986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007fa02  00000000  00000000  00037b69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000058c  00000000  00000000  000b756c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b7af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004a4 	.word	0x080004a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080004a4 	.word	0x080004a4

080001d4 <main>:

void SystemClock_Config(void);
void SPI1_Init(void);
void GPIO_Init(void);

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
    SystemClock_Config();
 80001da:	f000 f8ab 	bl	8000334 <SystemClock_Config>
    GPIO_Init();
 80001de:	f000 f851 	bl	8000284 <GPIO_Init>
    SPI1_Init();
 80001e2:	f000 f887 	bl	80002f4 <SPI1_Init>

    uint8_t received_data = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	72fb      	strb	r3, [r7, #11]

    while (1) {
        GPIOB->ODR |= (1 << 0); // LED sáng khi đợi
 80001ea:	4b24      	ldr	r3, [pc, #144]	; (800027c <main+0xa8>)
 80001ec:	695b      	ldr	r3, [r3, #20]
 80001ee:	4a23      	ldr	r2, [pc, #140]	; (800027c <main+0xa8>)
 80001f0:	f043 0301 	orr.w	r3, r3, #1
 80001f4:	6153      	str	r3, [r2, #20]

        while (!(SPI1->SR & SPI_SR_RXNE));
 80001f6:	bf00      	nop
 80001f8:	4b21      	ldr	r3, [pc, #132]	; (8000280 <main+0xac>)
 80001fa:	689b      	ldr	r3, [r3, #8]
 80001fc:	f003 0301 	and.w	r3, r3, #1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d0f9      	beq.n	80001f8 <main+0x24>
        received_data = SPI1->DR;
 8000204:	4b1e      	ldr	r3, [pc, #120]	; (8000280 <main+0xac>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	72fb      	strb	r3, [r7, #11]

        if (received_data == 0xAA) {
 800020a:	7afb      	ldrb	r3, [r7, #11]
 800020c:	2baa      	cmp	r3, #170	; 0xaa
 800020e:	d1ec      	bne.n	80001ea <main+0x16>
            for (int i = 0; i < 5; i++) {
 8000210:	2300      	movs	r3, #0
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	e024      	b.n	8000260 <main+0x8c>
                GPIOB->ODR &= ~(1 << 0);
 8000216:	4b19      	ldr	r3, [pc, #100]	; (800027c <main+0xa8>)
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	4a18      	ldr	r2, [pc, #96]	; (800027c <main+0xa8>)
 800021c:	f023 0301 	bic.w	r3, r3, #1
 8000220:	6153      	str	r3, [r2, #20]
                for (volatile int j = 0; j < 50000; j++);
 8000222:	2300      	movs	r3, #0
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	e002      	b.n	800022e <main+0x5a>
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3301      	adds	r3, #1
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000234:	4293      	cmp	r3, r2
 8000236:	ddf7      	ble.n	8000228 <main+0x54>
                GPIOB->ODR |= (1 << 0);
 8000238:	4b10      	ldr	r3, [pc, #64]	; (800027c <main+0xa8>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a0f      	ldr	r2, [pc, #60]	; (800027c <main+0xa8>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6153      	str	r3, [r2, #20]
                for (volatile int j = 0; j < 50000; j++);
 8000244:	2300      	movs	r3, #0
 8000246:	603b      	str	r3, [r7, #0]
 8000248:	e002      	b.n	8000250 <main+0x7c>
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	3301      	adds	r3, #1
 800024e:	603b      	str	r3, [r7, #0]
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000256:	4293      	cmp	r3, r2
 8000258:	ddf7      	ble.n	800024a <main+0x76>
            for (int i = 0; i < 5; i++) {
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	3301      	adds	r3, #1
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	2b04      	cmp	r3, #4
 8000264:	ddd7      	ble.n	8000216 <main+0x42>
            }
            SPI1->DR = 0xBB;
 8000266:	4b06      	ldr	r3, [pc, #24]	; (8000280 <main+0xac>)
 8000268:	22bb      	movs	r2, #187	; 0xbb
 800026a:	60da      	str	r2, [r3, #12]
            while (SPI1->SR & SPI_SR_BSY);
 800026c:	bf00      	nop
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <main+0xac>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000276:	2b00      	cmp	r3, #0
 8000278:	d1f9      	bne.n	800026e <main+0x9a>
        GPIOB->ODR |= (1 << 0); // LED sáng khi đợi
 800027a:	e7b6      	b.n	80001ea <main+0x16>
 800027c:	40020400 	.word	0x40020400
 8000280:	40013000 	.word	0x40013000

08000284 <GPIO_Init>:
        }
    }
}

void GPIO_Init(void) {
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000288:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <GPIO_Init+0x64>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028c:	4a16      	ldr	r2, [pc, #88]	; (80002e8 <GPIO_Init+0x64>)
 800028e:	f043 0303 	orr.w	r3, r3, #3
 8000292:	6313      	str	r3, [r2, #48]	; 0x30
    GPIOB->MODER &= ~(3 << (0 * 2));
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <GPIO_Init+0x68>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a14      	ldr	r2, [pc, #80]	; (80002ec <GPIO_Init+0x68>)
 800029a:	f023 0303 	bic.w	r3, r3, #3
 800029e:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (1 << (0 * 2));
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <GPIO_Init+0x68>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a11      	ldr	r2, [pc, #68]	; (80002ec <GPIO_Init+0x68>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(3 << (4 * 2) | 3 << (5 * 2) | 3 << (6 * 2) | 3 << (7 * 2));
 80002ac:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <GPIO_Init+0x6c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a0f      	ldr	r2, [pc, #60]	; (80002f0 <GPIO_Init+0x6c>)
 80002b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80002b6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << (4 * 2) | 2 << (5 * 2) | 2 << (6 * 2) | 2 << (7 * 2));
 80002b8:	4b0d      	ldr	r3, [pc, #52]	; (80002f0 <GPIO_Init+0x6c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0c      	ldr	r2, [pc, #48]	; (80002f0 <GPIO_Init+0x6c>)
 80002be:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 80002c2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xF << (4 * 4) | 0xF << (5 * 4) | 0xF << (6 * 4) | 0xF << (7 * 4));
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <GPIO_Init+0x6c>)
 80002c6:	6a1b      	ldr	r3, [r3, #32]
 80002c8:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <GPIO_Init+0x6c>)
 80002ca:	b29b      	uxth	r3, r3
 80002cc:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (5 << (4 * 4) | 5 << (5 * 4) | 5 << (6 * 4) | 5 << (7 * 4));
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <GPIO_Init+0x6c>)
 80002d0:	6a1b      	ldr	r3, [r3, #32]
 80002d2:	4a07      	ldr	r2, [pc, #28]	; (80002f0 <GPIO_Init+0x6c>)
 80002d4:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 80002d8:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 80002dc:	6213      	str	r3, [r2, #32]
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	40023800 	.word	0x40023800
 80002ec:	40020400 	.word	0x40020400
 80002f0:	40020000 	.word	0x40020000

080002f4 <SPI1_Init>:

void SPI1_Init(void) {
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <SPI1_Init+0x38>)
 80002fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002fc:	4a0b      	ldr	r2, [pc, #44]	; (800032c <SPI1_Init+0x38>)
 80002fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000302:	6453      	str	r3, [r2, #68]	; 0x44
    SPI1->CR1 = 0;
 8000304:	4b0a      	ldr	r3, [pc, #40]	; (8000330 <SPI1_Init+0x3c>)
 8000306:	2200      	movs	r2, #0
 8000308:	601a      	str	r2, [r3, #0]
    SPI1->CR1 &= ~(1 << 2); // Slave mode
 800030a:	4b09      	ldr	r3, [pc, #36]	; (8000330 <SPI1_Init+0x3c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	4a08      	ldr	r2, [pc, #32]	; (8000330 <SPI1_Init+0x3c>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1 << 6);  // Kích hoạt SPI
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <SPI1_Init+0x3c>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a05      	ldr	r2, [pc, #20]	; (8000330 <SPI1_Init+0x3c>)
 800031c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000320:	6013      	str	r3, [r2, #0]
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	40023800 	.word	0x40023800
 8000330:	40013000 	.word	0x40013000

08000334 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <SystemClock_Config+0x30>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <SystemClock_Config+0x30>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));
 8000344:	bf00      	nop
 8000346:	4b07      	ldr	r3, [pc, #28]	; (8000364 <SystemClock_Config+0x30>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f003 0302 	and.w	r3, r3, #2
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <SystemClock_Config+0x12>
    RCC->CFGR = 0;
 8000352:	4b04      	ldr	r3, [pc, #16]	; (8000364 <SystemClock_Config+0x30>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40023800 	.word	0x40023800

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800036c:	e7fe      	b.n	800036c <NMI_Handler+0x4>

0800036e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <HardFault_Handler+0x4>

08000374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <MemManage_Handler+0x4>

0800037a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <UsageFault_Handler+0x4>

08000386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b4:	f000 f83e 	bl	8000434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}

080003bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <SystemInit+0x20>)
 80003c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c6:	4a05      	ldr	r2, [pc, #20]	; (80003dc <SystemInit+0x20>)
 80003c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	e000ed00 	.word	0xe000ed00

080003e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80003e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000418 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003e4:	480d      	ldr	r0, [pc, #52]	; (800041c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003e6:	490e      	ldr	r1, [pc, #56]	; (8000420 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003e8:	4a0e      	ldr	r2, [pc, #56]	; (8000424 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ec:	e002      	b.n	80003f4 <LoopCopyDataInit>

080003ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f2:	3304      	adds	r3, #4

080003f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003f8:	d3f9      	bcc.n	80003ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fa:	4a0b      	ldr	r2, [pc, #44]	; (8000428 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003fc:	4c0b      	ldr	r4, [pc, #44]	; (800042c <LoopFillZerobss+0x26>)
  movs r3, #0
 80003fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000400:	e001      	b.n	8000406 <LoopFillZerobss>

08000402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000404:	3204      	adds	r2, #4

08000406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000408:	d3fb      	bcc.n	8000402 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800040a:	f7ff ffd7 	bl	80003bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800040e:	f000 f825 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000412:	f7ff fedf 	bl	80001d4 <main>
  bx  lr    
 8000416:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000418:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000420:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000424:	080004c4 	.word	0x080004c4
  ldr r2, =_sbss
 8000428:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800042c:	20000024 	.word	0x20000024

08000430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC_IRQHandler>
	...

08000434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <HAL_IncTick+0x20>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	461a      	mov	r2, r3
 800043e:	4b06      	ldr	r3, [pc, #24]	; (8000458 <HAL_IncTick+0x24>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4413      	add	r3, r2
 8000444:	4a04      	ldr	r2, [pc, #16]	; (8000458 <HAL_IncTick+0x24>)
 8000446:	6013      	str	r3, [r2, #0]
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	20000000 	.word	0x20000000
 8000458:	20000020 	.word	0x20000020

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4d0d      	ldr	r5, [pc, #52]	; (8000494 <__libc_init_array+0x38>)
 8000460:	4c0d      	ldr	r4, [pc, #52]	; (8000498 <__libc_init_array+0x3c>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	2600      	movs	r6, #0
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	4d0b      	ldr	r5, [pc, #44]	; (800049c <__libc_init_array+0x40>)
 800046e:	4c0c      	ldr	r4, [pc, #48]	; (80004a0 <__libc_init_array+0x44>)
 8000470:	f000 f818 	bl	80004a4 <_init>
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	10a4      	asrs	r4, r4, #2
 8000478:	2600      	movs	r6, #0
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004bc 	.word	0x080004bc
 8000498:	080004bc 	.word	0x080004bc
 800049c:	080004bc 	.word	0x080004bc
 80004a0:	080004c0 	.word	0x080004c0

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr
